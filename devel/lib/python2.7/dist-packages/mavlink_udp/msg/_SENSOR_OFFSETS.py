"""autogenerated by genpy from mavlink_udp/SENSOR_OFFSETS.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SENSOR_OFFSETS(genpy.Message):
  _md5sum = "ab3328109c8720453893bb93a3ea11ef"
  _type = "mavlink_udp/SENSOR_OFFSETS"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Automatically Generated in 2014-08-12 13:24:39.913034
# MESSAGE: SENSOR_OFFSETS
# Description:Offsets and calibrations values for hardware
#        sensors. This makes it easier to debug the calibration process.
uint8 ID = 150
uint8 sysid
uint8 compid
int16 mag_ofs_x
int16 mag_ofs_y
int16 mag_ofs_z
float32 mag_declination
int32 raw_press
int32 raw_temp
float32 gyro_cal_x
float32 gyro_cal_y
float32 gyro_cal_z
float32 accel_cal_x
float32 accel_cal_y
float32 accel_cal_z

"""
  # Pseudo-constants
  ID = 150

  __slots__ = ['sysid','compid','mag_ofs_x','mag_ofs_y','mag_ofs_z','mag_declination','raw_press','raw_temp','gyro_cal_x','gyro_cal_y','gyro_cal_z','accel_cal_x','accel_cal_y','accel_cal_z']
  _slot_types = ['uint8','uint8','int16','int16','int16','float32','int32','int32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sysid,compid,mag_ofs_x,mag_ofs_y,mag_ofs_z,mag_declination,raw_press,raw_temp,gyro_cal_x,gyro_cal_y,gyro_cal_z,accel_cal_x,accel_cal_y,accel_cal_z

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SENSOR_OFFSETS, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sysid is None:
        self.sysid = 0
      if self.compid is None:
        self.compid = 0
      if self.mag_ofs_x is None:
        self.mag_ofs_x = 0
      if self.mag_ofs_y is None:
        self.mag_ofs_y = 0
      if self.mag_ofs_z is None:
        self.mag_ofs_z = 0
      if self.mag_declination is None:
        self.mag_declination = 0.
      if self.raw_press is None:
        self.raw_press = 0
      if self.raw_temp is None:
        self.raw_temp = 0
      if self.gyro_cal_x is None:
        self.gyro_cal_x = 0.
      if self.gyro_cal_y is None:
        self.gyro_cal_y = 0.
      if self.gyro_cal_z is None:
        self.gyro_cal_z = 0.
      if self.accel_cal_x is None:
        self.accel_cal_x = 0.
      if self.accel_cal_y is None:
        self.accel_cal_y = 0.
      if self.accel_cal_z is None:
        self.accel_cal_z = 0.
    else:
      self.sysid = 0
      self.compid = 0
      self.mag_ofs_x = 0
      self.mag_ofs_y = 0
      self.mag_ofs_z = 0
      self.mag_declination = 0.
      self.raw_press = 0
      self.raw_temp = 0
      self.gyro_cal_x = 0.
      self.gyro_cal_y = 0.
      self.gyro_cal_z = 0.
      self.accel_cal_x = 0.
      self.accel_cal_y = 0.
      self.accel_cal_z = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2B3hf2i6f.pack(_x.sysid, _x.compid, _x.mag_ofs_x, _x.mag_ofs_y, _x.mag_ofs_z, _x.mag_declination, _x.raw_press, _x.raw_temp, _x.gyro_cal_x, _x.gyro_cal_y, _x.gyro_cal_z, _x.accel_cal_x, _x.accel_cal_y, _x.accel_cal_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.sysid, _x.compid, _x.mag_ofs_x, _x.mag_ofs_y, _x.mag_ofs_z, _x.mag_declination, _x.raw_press, _x.raw_temp, _x.gyro_cal_x, _x.gyro_cal_y, _x.gyro_cal_z, _x.accel_cal_x, _x.accel_cal_y, _x.accel_cal_z,) = _struct_2B3hf2i6f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2B3hf2i6f.pack(_x.sysid, _x.compid, _x.mag_ofs_x, _x.mag_ofs_y, _x.mag_ofs_z, _x.mag_declination, _x.raw_press, _x.raw_temp, _x.gyro_cal_x, _x.gyro_cal_y, _x.gyro_cal_z, _x.accel_cal_x, _x.accel_cal_y, _x.accel_cal_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.sysid, _x.compid, _x.mag_ofs_x, _x.mag_ofs_y, _x.mag_ofs_z, _x.mag_declination, _x.raw_press, _x.raw_temp, _x.gyro_cal_x, _x.gyro_cal_y, _x.gyro_cal_z, _x.accel_cal_x, _x.accel_cal_y, _x.accel_cal_z,) = _struct_2B3hf2i6f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2B3hf2i6f = struct.Struct("<2B3hf2i6f")
