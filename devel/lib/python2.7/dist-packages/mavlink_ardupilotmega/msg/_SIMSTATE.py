"""autogenerated by genpy from mavlink_ardupilotmega/SIMSTATE.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SIMSTATE(genpy.Message):
  _md5sum = "82db345e06a1ca0eaf3d39b83cf83c38"
  _type = "mavlink_ardupilotmega/SIMSTATE"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Automatically Generated in 2014-08-12 13:24:39.913927
# MESSAGE: SIMSTATE
# Description:Status of simulation environment, if used
uint8 ID = 164
uint8 sysid
uint8 compid
float32 roll
float32 pitch
float32 yaw
float32 xacc
float32 yacc
float32 zacc
float32 xgyro
float32 ygyro
float32 zgyro
float32 lat
float32 lng

"""
  # Pseudo-constants
  ID = 164

  __slots__ = ['sysid','compid','roll','pitch','yaw','xacc','yacc','zacc','xgyro','ygyro','zgyro','lat','lng']
  _slot_types = ['uint8','uint8','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sysid,compid,roll,pitch,yaw,xacc,yacc,zacc,xgyro,ygyro,zgyro,lat,lng

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SIMSTATE, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sysid is None:
        self.sysid = 0
      if self.compid is None:
        self.compid = 0
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.xacc is None:
        self.xacc = 0.
      if self.yacc is None:
        self.yacc = 0.
      if self.zacc is None:
        self.zacc = 0.
      if self.xgyro is None:
        self.xgyro = 0.
      if self.ygyro is None:
        self.ygyro = 0.
      if self.zgyro is None:
        self.zgyro = 0.
      if self.lat is None:
        self.lat = 0.
      if self.lng is None:
        self.lng = 0.
    else:
      self.sysid = 0
      self.compid = 0
      self.roll = 0.
      self.pitch = 0.
      self.yaw = 0.
      self.xacc = 0.
      self.yacc = 0.
      self.zacc = 0.
      self.xgyro = 0.
      self.ygyro = 0.
      self.zgyro = 0.
      self.lat = 0.
      self.lng = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2B11f.pack(_x.sysid, _x.compid, _x.roll, _x.pitch, _x.yaw, _x.xacc, _x.yacc, _x.zacc, _x.xgyro, _x.ygyro, _x.zgyro, _x.lat, _x.lng))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 46
      (_x.sysid, _x.compid, _x.roll, _x.pitch, _x.yaw, _x.xacc, _x.yacc, _x.zacc, _x.xgyro, _x.ygyro, _x.zgyro, _x.lat, _x.lng,) = _struct_2B11f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2B11f.pack(_x.sysid, _x.compid, _x.roll, _x.pitch, _x.yaw, _x.xacc, _x.yacc, _x.zacc, _x.xgyro, _x.ygyro, _x.zgyro, _x.lat, _x.lng))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 46
      (_x.sysid, _x.compid, _x.roll, _x.pitch, _x.yaw, _x.xacc, _x.yacc, _x.zacc, _x.xgyro, _x.ygyro, _x.zgyro, _x.lat, _x.lng,) = _struct_2B11f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2B11f = struct.Struct("<2B11f")
