"""autogenerated by genpy from mavlink_common/RC_CHANNELS_OVERRIDE.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RC_CHANNELS_OVERRIDE(genpy.Message):
  _md5sum = "8f09f079d5977e6dc2c495d2c3104827"
  _type = "mavlink_common/RC_CHANNELS_OVERRIDE"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Automatically Generated in 2014-08-12 13:24:39.909508
# MESSAGE: RC_CHANNELS_OVERRIDE
# Description:The RAW values of the RC channels sent to the MAV to override info received from the RC radio. A value of -1 means no change to that channel. A value of 0 means control of that channel should be released back to the RC radio. The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%. Individual receivers/transmitters might violate this specification.
uint8 ID = 70
uint8 sysid
uint8 compid
uint8 target_system
uint8 target_component
uint16 chan1_raw
uint16 chan2_raw
uint16 chan3_raw
uint16 chan4_raw
uint16 chan5_raw
uint16 chan6_raw
uint16 chan7_raw
uint16 chan8_raw

"""
  # Pseudo-constants
  ID = 70

  __slots__ = ['sysid','compid','target_system','target_component','chan1_raw','chan2_raw','chan3_raw','chan4_raw','chan5_raw','chan6_raw','chan7_raw','chan8_raw']
  _slot_types = ['uint8','uint8','uint8','uint8','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sysid,compid,target_system,target_component,chan1_raw,chan2_raw,chan3_raw,chan4_raw,chan5_raw,chan6_raw,chan7_raw,chan8_raw

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RC_CHANNELS_OVERRIDE, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sysid is None:
        self.sysid = 0
      if self.compid is None:
        self.compid = 0
      if self.target_system is None:
        self.target_system = 0
      if self.target_component is None:
        self.target_component = 0
      if self.chan1_raw is None:
        self.chan1_raw = 0
      if self.chan2_raw is None:
        self.chan2_raw = 0
      if self.chan3_raw is None:
        self.chan3_raw = 0
      if self.chan4_raw is None:
        self.chan4_raw = 0
      if self.chan5_raw is None:
        self.chan5_raw = 0
      if self.chan6_raw is None:
        self.chan6_raw = 0
      if self.chan7_raw is None:
        self.chan7_raw = 0
      if self.chan8_raw is None:
        self.chan8_raw = 0
    else:
      self.sysid = 0
      self.compid = 0
      self.target_system = 0
      self.target_component = 0
      self.chan1_raw = 0
      self.chan2_raw = 0
      self.chan3_raw = 0
      self.chan4_raw = 0
      self.chan5_raw = 0
      self.chan6_raw = 0
      self.chan7_raw = 0
      self.chan8_raw = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4B8H.pack(_x.sysid, _x.compid, _x.target_system, _x.target_component, _x.chan1_raw, _x.chan2_raw, _x.chan3_raw, _x.chan4_raw, _x.chan5_raw, _x.chan6_raw, _x.chan7_raw, _x.chan8_raw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.sysid, _x.compid, _x.target_system, _x.target_component, _x.chan1_raw, _x.chan2_raw, _x.chan3_raw, _x.chan4_raw, _x.chan5_raw, _x.chan6_raw, _x.chan7_raw, _x.chan8_raw,) = _struct_4B8H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4B8H.pack(_x.sysid, _x.compid, _x.target_system, _x.target_component, _x.chan1_raw, _x.chan2_raw, _x.chan3_raw, _x.chan4_raw, _x.chan5_raw, _x.chan6_raw, _x.chan7_raw, _x.chan8_raw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.sysid, _x.compid, _x.target_system, _x.target_component, _x.chan1_raw, _x.chan2_raw, _x.chan3_raw, _x.chan4_raw, _x.chan5_raw, _x.chan6_raw, _x.chan7_raw, _x.chan8_raw,) = _struct_4B8H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4B8H = struct.Struct("<4B8H")
