"""autogenerated by genpy from mavlink_common/SET_QUAD_MOTORS_SETPOINT.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SET_QUAD_MOTORS_SETPOINT(genpy.Message):
  _md5sum = "06bbeaab35761779349171359a979245"
  _type = "mavlink_common/SET_QUAD_MOTORS_SETPOINT"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Automatically Generated in 2014-08-12 13:24:39.909038
# MESSAGE: SET_QUAD_MOTORS_SETPOINT
# Description:Setpoint in the four motor speeds
uint8 ID = 60
uint8 sysid
uint8 compid
uint8 target_system
uint16 motor_front_nw
uint16 motor_right_ne
uint16 motor_back_se
uint16 motor_left_sw

"""
  # Pseudo-constants
  ID = 60

  __slots__ = ['sysid','compid','target_system','motor_front_nw','motor_right_ne','motor_back_se','motor_left_sw']
  _slot_types = ['uint8','uint8','uint8','uint16','uint16','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sysid,compid,target_system,motor_front_nw,motor_right_ne,motor_back_se,motor_left_sw

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SET_QUAD_MOTORS_SETPOINT, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sysid is None:
        self.sysid = 0
      if self.compid is None:
        self.compid = 0
      if self.target_system is None:
        self.target_system = 0
      if self.motor_front_nw is None:
        self.motor_front_nw = 0
      if self.motor_right_ne is None:
        self.motor_right_ne = 0
      if self.motor_back_se is None:
        self.motor_back_se = 0
      if self.motor_left_sw is None:
        self.motor_left_sw = 0
    else:
      self.sysid = 0
      self.compid = 0
      self.target_system = 0
      self.motor_front_nw = 0
      self.motor_right_ne = 0
      self.motor_back_se = 0
      self.motor_left_sw = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3B4H.pack(_x.sysid, _x.compid, _x.target_system, _x.motor_front_nw, _x.motor_right_ne, _x.motor_back_se, _x.motor_left_sw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 11
      (_x.sysid, _x.compid, _x.target_system, _x.motor_front_nw, _x.motor_right_ne, _x.motor_back_se, _x.motor_left_sw,) = _struct_3B4H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3B4H.pack(_x.sysid, _x.compid, _x.target_system, _x.motor_front_nw, _x.motor_right_ne, _x.motor_back_se, _x.motor_left_sw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 11
      (_x.sysid, _x.compid, _x.target_system, _x.motor_front_nw, _x.motor_right_ne, _x.motor_back_se, _x.motor_left_sw,) = _struct_3B4H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3B4H = struct.Struct("<3B4H")
