"""autogenerated by genpy from mavlink_common/SET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST(genpy.Message):
  _md5sum = "8cce745f1b99afb43595ef64993b94df"
  _type = "mavlink_common/SET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Automatically Generated in 2014-08-12 13:24:39.909219
# MESSAGE: SET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST
# Description:Setpoint for up to four quadrotors in a group / wing
uint8 ID = 63
uint8 sysid
uint8 compid
uint8 group
uint8 mode
uint8[4] led_red
uint8[4] led_blue
uint8[4] led_green
int16[4] roll
int16[4] pitch
int16[4] yaw
uint16[4] thrust

"""
  # Pseudo-constants
  ID = 63

  __slots__ = ['sysid','compid','group','mode','led_red','led_blue','led_green','roll','pitch','yaw','thrust']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8[4]','uint8[4]','uint8[4]','int16[4]','int16[4]','int16[4]','uint16[4]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sysid,compid,group,mode,led_red,led_blue,led_green,roll,pitch,yaw,thrust

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SET_QUAD_SWARM_LED_ROLL_PITCH_YAW_THRUST, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sysid is None:
        self.sysid = 0
      if self.compid is None:
        self.compid = 0
      if self.group is None:
        self.group = 0
      if self.mode is None:
        self.mode = 0
      if self.led_red is None:
        self.led_red = chr(0)*4
      if self.led_blue is None:
        self.led_blue = chr(0)*4
      if self.led_green is None:
        self.led_green = chr(0)*4
      if self.roll is None:
        self.roll = [0,0,0,0]
      if self.pitch is None:
        self.pitch = [0,0,0,0]
      if self.yaw is None:
        self.yaw = [0,0,0,0]
      if self.thrust is None:
        self.thrust = [0,0,0,0]
    else:
      self.sysid = 0
      self.compid = 0
      self.group = 0
      self.mode = 0
      self.led_red = chr(0)*4
      self.led_blue = chr(0)*4
      self.led_green = chr(0)*4
      self.roll = [0,0,0,0]
      self.pitch = [0,0,0,0]
      self.yaw = [0,0,0,0]
      self.thrust = [0,0,0,0]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4B.pack(_x.sysid, _x.compid, _x.group, _x.mode))
      _x = self.led_red
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_4B.pack(*_x))
      else:
        buff.write(_struct_4s.pack(_x))
      _x = self.led_blue
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_4B.pack(*_x))
      else:
        buff.write(_struct_4s.pack(_x))
      _x = self.led_green
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_4B.pack(*_x))
      else:
        buff.write(_struct_4s.pack(_x))
      buff.write(_struct_4h.pack(*self.roll))
      buff.write(_struct_4h.pack(*self.pitch))
      buff.write(_struct_4h.pack(*self.yaw))
      buff.write(_struct_4H.pack(*self.thrust))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.sysid, _x.compid, _x.group, _x.mode,) = _struct_4B.unpack(str[start:end])
      start = end
      end += 4
      self.led_red = str[start:end]
      start = end
      end += 4
      self.led_blue = str[start:end]
      start = end
      end += 4
      self.led_green = str[start:end]
      start = end
      end += 8
      self.roll = _struct_4h.unpack(str[start:end])
      start = end
      end += 8
      self.pitch = _struct_4h.unpack(str[start:end])
      start = end
      end += 8
      self.yaw = _struct_4h.unpack(str[start:end])
      start = end
      end += 8
      self.thrust = _struct_4H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4B.pack(_x.sysid, _x.compid, _x.group, _x.mode))
      _x = self.led_red
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_4B.pack(*_x))
      else:
        buff.write(_struct_4s.pack(_x))
      _x = self.led_blue
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_4B.pack(*_x))
      else:
        buff.write(_struct_4s.pack(_x))
      _x = self.led_green
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_4B.pack(*_x))
      else:
        buff.write(_struct_4s.pack(_x))
      buff.write(self.roll.tostring())
      buff.write(self.pitch.tostring())
      buff.write(self.yaw.tostring())
      buff.write(self.thrust.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.sysid, _x.compid, _x.group, _x.mode,) = _struct_4B.unpack(str[start:end])
      start = end
      end += 4
      self.led_red = str[start:end]
      start = end
      end += 4
      self.led_blue = str[start:end]
      start = end
      end += 4
      self.led_green = str[start:end]
      start = end
      end += 8
      self.roll = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=4)
      start = end
      end += 8
      self.pitch = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=4)
      start = end
      end += 8
      self.yaw = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=4)
      start = end
      end += 8
      self.thrust = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=4)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4H = struct.Struct("<4H")
_struct_4B = struct.Struct("<4B")
_struct_4s = struct.Struct("<4s")
_struct_4h = struct.Struct("<4h")
