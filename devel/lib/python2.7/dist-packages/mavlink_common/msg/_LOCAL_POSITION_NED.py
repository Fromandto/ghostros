"""autogenerated by genpy from mavlink_common/LOCAL_POSITION_NED.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LOCAL_POSITION_NED(genpy.Message):
  _md5sum = "ca016a05016016c67ead0fbbf9c8bf5c"
  _type = "mavlink_common/LOCAL_POSITION_NED"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Automatically Generated in 2014-08-12 13:24:39.907415
# MESSAGE: LOCAL_POSITION_NED
# Description:The filtered local position (e.g. fused computer vision and accelerometers). Coordinate frame is right-handed, Z-axis down (aeronautical frame, NED / north-east-down convention)
uint8 ID = 32
uint8 sysid
uint8 compid
uint32 time_boot_ms
float32 x
float32 y
float32 z
float32 vx
float32 vy
float32 vz

"""
  # Pseudo-constants
  ID = 32

  __slots__ = ['sysid','compid','time_boot_ms','x','y','z','vx','vy','vz']
  _slot_types = ['uint8','uint8','uint32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sysid,compid,time_boot_ms,x,y,z,vx,vy,vz

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LOCAL_POSITION_NED, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sysid is None:
        self.sysid = 0
      if self.compid is None:
        self.compid = 0
      if self.time_boot_ms is None:
        self.time_boot_ms = 0
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
      if self.vx is None:
        self.vx = 0.
      if self.vy is None:
        self.vy = 0.
      if self.vz is None:
        self.vz = 0.
    else:
      self.sysid = 0
      self.compid = 0
      self.time_boot_ms = 0
      self.x = 0.
      self.y = 0.
      self.z = 0.
      self.vx = 0.
      self.vy = 0.
      self.vz = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2BI6f.pack(_x.sysid, _x.compid, _x.time_boot_ms, _x.x, _x.y, _x.z, _x.vx, _x.vy, _x.vz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 30
      (_x.sysid, _x.compid, _x.time_boot_ms, _x.x, _x.y, _x.z, _x.vx, _x.vy, _x.vz,) = _struct_2BI6f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2BI6f.pack(_x.sysid, _x.compid, _x.time_boot_ms, _x.x, _x.y, _x.z, _x.vx, _x.vy, _x.vz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 30
      (_x.sysid, _x.compid, _x.time_boot_ms, _x.x, _x.y, _x.z, _x.vx, _x.vy, _x.vz,) = _struct_2BI6f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2BI6f = struct.Struct("<2BI6f")
