"""autogenerated by genpy from mavlink_common/E_MAV_COMPONENT.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class E_MAV_COMPONENT(genpy.Message):
  _md5sum = "d7b87d5dd5b3c517b8d2ff7b9b9ac534"
  _type = "mavlink_common/E_MAV_COMPONENT"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Automatically Generated in <function get_timestamp at 0x2710500>
# ENUM: E_MAV_COMPONENT
uint8 E_MAV_COMP_ID_ALL = 0
uint8 E_MAV_COMP_ID_GPS = 220
uint8 E_MAV_COMP_ID_MISSIONPLANNER = 190
uint8 E_MAV_COMP_ID_PATHPLANNER = 195
uint8 E_MAV_COMP_ID_MAPPER = 180
uint8 E_MAV_COMP_ID_CAMERA = 100
uint8 E_MAV_COMP_ID_IMU = 200
uint8 E_MAV_COMP_ID_IMU_2 = 201
uint8 E_MAV_COMP_ID_IMU_3 = 202
uint8 E_MAV_COMP_ID_UDP_BRIDGE = 240
uint8 E_MAV_COMP_ID_UART_BRIDGE = 241
uint8 E_MAV_COMP_ID_SYSTEM_CONTROL = 250
uint8 E_MAV_COMP_ID_SERVO1 = 140
uint8 E_MAV_COMP_ID_SERVO2 = 141
uint8 E_MAV_COMP_ID_SERVO3 = 142
uint8 E_MAV_COMP_ID_SERVO4 = 143
uint8 E_MAV_COMP_ID_SERVO5 = 144
uint8 E_MAV_COMP_ID_SERVO6 = 145
uint8 E_MAV_COMP_ID_SERVO7 = 146
uint8 E_MAV_COMP_ID_SERVO8 = 147
uint8 E_MAV_COMP_ID_SERVO9 = 148
uint8 E_MAV_COMP_ID_SERVO10 = 149
uint8 E_MAV_COMP_ID_SERVO11 = 150
uint8 E_MAV_COMP_ID_SERVO12 = 151
uint8 E_MAV_COMP_ID_SERVO13 = 152
uint8 E_MAV_COMP_ID_SERVO14 = 153

"""
  # Pseudo-constants
  E_MAV_COMP_ID_ALL = 0
  E_MAV_COMP_ID_GPS = 220
  E_MAV_COMP_ID_MISSIONPLANNER = 190
  E_MAV_COMP_ID_PATHPLANNER = 195
  E_MAV_COMP_ID_MAPPER = 180
  E_MAV_COMP_ID_CAMERA = 100
  E_MAV_COMP_ID_IMU = 200
  E_MAV_COMP_ID_IMU_2 = 201
  E_MAV_COMP_ID_IMU_3 = 202
  E_MAV_COMP_ID_UDP_BRIDGE = 240
  E_MAV_COMP_ID_UART_BRIDGE = 241
  E_MAV_COMP_ID_SYSTEM_CONTROL = 250
  E_MAV_COMP_ID_SERVO1 = 140
  E_MAV_COMP_ID_SERVO2 = 141
  E_MAV_COMP_ID_SERVO3 = 142
  E_MAV_COMP_ID_SERVO4 = 143
  E_MAV_COMP_ID_SERVO5 = 144
  E_MAV_COMP_ID_SERVO6 = 145
  E_MAV_COMP_ID_SERVO7 = 146
  E_MAV_COMP_ID_SERVO8 = 147
  E_MAV_COMP_ID_SERVO9 = 148
  E_MAV_COMP_ID_SERVO10 = 149
  E_MAV_COMP_ID_SERVO11 = 150
  E_MAV_COMP_ID_SERVO12 = 151
  E_MAV_COMP_ID_SERVO13 = 152
  E_MAV_COMP_ID_SERVO14 = 153

  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(E_MAV_COMPONENT, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
