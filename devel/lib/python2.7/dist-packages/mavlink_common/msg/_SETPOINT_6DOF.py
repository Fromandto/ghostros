"""autogenerated by genpy from mavlink_common/SETPOINT_6DOF.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SETPOINT_6DOF(genpy.Message):
  _md5sum = "e47eab073931fc53905334eb23c9dd58"
  _type = "mavlink_common/SETPOINT_6DOF"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Automatically Generated in 2014-08-12 13:24:39.910822
# MESSAGE: SETPOINT_6DOF
# Description:Set the 6 DOF setpoint for a attitude and position controller.
uint8 ID = 149
uint8 sysid
uint8 compid
uint8 target_system
float32 trans_x
float32 trans_y
float32 trans_z
float32 rot_x
float32 rot_y
float32 rot_z

"""
  # Pseudo-constants
  ID = 149

  __slots__ = ['sysid','compid','target_system','trans_x','trans_y','trans_z','rot_x','rot_y','rot_z']
  _slot_types = ['uint8','uint8','uint8','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sysid,compid,target_system,trans_x,trans_y,trans_z,rot_x,rot_y,rot_z

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SETPOINT_6DOF, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sysid is None:
        self.sysid = 0
      if self.compid is None:
        self.compid = 0
      if self.target_system is None:
        self.target_system = 0
      if self.trans_x is None:
        self.trans_x = 0.
      if self.trans_y is None:
        self.trans_y = 0.
      if self.trans_z is None:
        self.trans_z = 0.
      if self.rot_x is None:
        self.rot_x = 0.
      if self.rot_y is None:
        self.rot_y = 0.
      if self.rot_z is None:
        self.rot_z = 0.
    else:
      self.sysid = 0
      self.compid = 0
      self.target_system = 0
      self.trans_x = 0.
      self.trans_y = 0.
      self.trans_z = 0.
      self.rot_x = 0.
      self.rot_y = 0.
      self.rot_z = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3B6f.pack(_x.sysid, _x.compid, _x.target_system, _x.trans_x, _x.trans_y, _x.trans_z, _x.rot_x, _x.rot_y, _x.rot_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 27
      (_x.sysid, _x.compid, _x.target_system, _x.trans_x, _x.trans_y, _x.trans_z, _x.rot_x, _x.rot_y, _x.rot_z,) = _struct_3B6f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3B6f.pack(_x.sysid, _x.compid, _x.target_system, _x.trans_x, _x.trans_y, _x.trans_z, _x.rot_x, _x.rot_y, _x.rot_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 27
      (_x.sysid, _x.compid, _x.target_system, _x.trans_x, _x.trans_y, _x.trans_z, _x.rot_x, _x.rot_y, _x.rot_z,) = _struct_3B6f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3B6f = struct.Struct("<3B6f")
