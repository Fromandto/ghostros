"""autogenerated by genpy from mavlink_common/DEBUG_VECT.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DEBUG_VECT(genpy.Message):
  _md5sum = "f3da2167b9fb70943817b76932cd0339"
  _type = "mavlink_common/DEBUG_VECT"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Automatically Generated in 2014-08-12 13:24:39.910935
# MESSAGE: DEBUG_VECT
uint8 ID = 250
uint8 sysid
uint8 compid
char[10] name
uint64 time_usec
float32 x
float32 y
float32 z

"""
  # Pseudo-constants
  ID = 250

  __slots__ = ['sysid','compid','name','time_usec','x','y','z']
  _slot_types = ['uint8','uint8','char[10]','uint64','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sysid,compid,name,time_usec,x,y,z

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DEBUG_VECT, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sysid is None:
        self.sysid = 0
      if self.compid is None:
        self.compid = 0
      if self.name is None:
        self.name = chr(0)*10
      if self.time_usec is None:
        self.time_usec = 0
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
    else:
      self.sysid = 0
      self.compid = 0
      self.name = chr(0)*10
      self.time_usec = 0
      self.x = 0.
      self.y = 0.
      self.z = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2B.pack(_x.sysid, _x.compid))
      _x = self.name
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_10B.pack(*_x))
      else:
        buff.write(_struct_10s.pack(_x))
      _x = self
      buff.write(_struct_Q3f.pack(_x.time_usec, _x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.sysid, _x.compid,) = _struct_2B.unpack(str[start:end])
      start = end
      end += 10
      self.name = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.time_usec, _x.x, _x.y, _x.z,) = _struct_Q3f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2B.pack(_x.sysid, _x.compid))
      _x = self.name
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_10B.pack(*_x))
      else:
        buff.write(_struct_10s.pack(_x))
      _x = self
      buff.write(_struct_Q3f.pack(_x.time_usec, _x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.sysid, _x.compid,) = _struct_2B.unpack(str[start:end])
      start = end
      end += 10
      self.name = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.time_usec, _x.x, _x.y, _x.z,) = _struct_Q3f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_10B = struct.Struct("<10B")
_struct_10s = struct.Struct("<10s")
_struct_Q3f = struct.Struct("<Q3f")
_struct_2B = struct.Struct("<2B")
