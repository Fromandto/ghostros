"""autogenerated by genpy from mavlink_common/E_MAV_MODE_FLAG.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class E_MAV_MODE_FLAG(genpy.Message):
  _md5sum = "b92f52b2f18f747a56358726bde7c6f2"
  _type = "mavlink_common/E_MAV_MODE_FLAG"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Automatically Generated in <function get_timestamp at 0x2710500>
# ENUM: E_MAV_MODE_FLAG
# Description:These flags encode the MAV mode.
# 0b10000000 MAV safety set to armed. Motors are enabled / running / can start. Ready to fly.
uint8 E_MAV_MODE_FLAG_SAFETY_ARMED = 128
# 0b01000000 remote control input is enabled.
uint8 E_MAV_MODE_FLAG_MANUAL_INPUT_ENABLED = 64
# 0b00100000 hardware in the loop simulation. All motors / actuators are blocked, but internal software is full operational.
uint8 E_MAV_MODE_FLAG_HIL_ENABLED = 32
# 0b00010000 system stabilizes electronically its attitude (and optionally position). It needs however further control inputs to move around.
uint8 E_MAV_MODE_FLAG_STABILIZE_ENABLED = 16
# 0b00001000 guided mode enabled, system flies MISSIONs / mission items.
uint8 E_MAV_MODE_FLAG_GUIDED_ENABLED = 8
# 0b00000100 autonomous mode enabled, system finds its own goal positions. Guided flag can be set or not, depends on the actual implementation.
uint8 E_MAV_MODE_FLAG_AUTO_ENABLED = 4
# 0b00000010 system has a test mode enabled. This flag is intended for temporary system tests and should not be used for stable implementations.
uint8 E_MAV_MODE_FLAG_TEST_ENABLED = 2
# 0b00000001 Reserved for future use.
uint8 E_MAV_MODE_FLAG_CUSTOM_MODE_ENABLED = 1

"""
  # Pseudo-constants
  E_MAV_MODE_FLAG_SAFETY_ARMED = 128
  E_MAV_MODE_FLAG_MANUAL_INPUT_ENABLED = 64
  E_MAV_MODE_FLAG_HIL_ENABLED = 32
  E_MAV_MODE_FLAG_STABILIZE_ENABLED = 16
  E_MAV_MODE_FLAG_GUIDED_ENABLED = 8
  E_MAV_MODE_FLAG_AUTO_ENABLED = 4
  E_MAV_MODE_FLAG_TEST_ENABLED = 2
  E_MAV_MODE_FLAG_CUSTOM_MODE_ENABLED = 1

  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(E_MAV_MODE_FLAG, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
