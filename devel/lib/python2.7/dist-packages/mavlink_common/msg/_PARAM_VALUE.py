"""autogenerated by genpy from mavlink_common/PARAM_VALUE.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PARAM_VALUE(genpy.Message):
  _md5sum = "9487999b6e23e22057b391b3a75efb11"
  _type = "mavlink_common/PARAM_VALUE"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Automatically Generated in 2014-08-12 13:24:39.906679
# MESSAGE: PARAM_VALUE
# Description:Emit the value of a onboard parameter. The inclusion of param_count and param_index in the message allows the recipient to keep track of received parameters and allows him to re-request missing parameters after a loss or timeout.
uint8 ID = 22
uint8 sysid
uint8 compid
char[16] param_id
float32 param_value
uint8 param_type
uint16 param_count
uint16 param_index

"""
  # Pseudo-constants
  ID = 22

  __slots__ = ['sysid','compid','param_id','param_value','param_type','param_count','param_index']
  _slot_types = ['uint8','uint8','char[16]','float32','uint8','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sysid,compid,param_id,param_value,param_type,param_count,param_index

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PARAM_VALUE, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sysid is None:
        self.sysid = 0
      if self.compid is None:
        self.compid = 0
      if self.param_id is None:
        self.param_id = chr(0)*16
      if self.param_value is None:
        self.param_value = 0.
      if self.param_type is None:
        self.param_type = 0
      if self.param_count is None:
        self.param_count = 0
      if self.param_index is None:
        self.param_index = 0
    else:
      self.sysid = 0
      self.compid = 0
      self.param_id = chr(0)*16
      self.param_value = 0.
      self.param_type = 0
      self.param_count = 0
      self.param_index = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2B.pack(_x.sysid, _x.compid))
      _x = self.param_id
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_16B.pack(*_x))
      else:
        buff.write(_struct_16s.pack(_x))
      _x = self
      buff.write(_struct_fB2H.pack(_x.param_value, _x.param_type, _x.param_count, _x.param_index))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.sysid, _x.compid,) = _struct_2B.unpack(str[start:end])
      start = end
      end += 16
      self.param_id = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.param_value, _x.param_type, _x.param_count, _x.param_index,) = _struct_fB2H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2B.pack(_x.sysid, _x.compid))
      _x = self.param_id
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_16B.pack(*_x))
      else:
        buff.write(_struct_16s.pack(_x))
      _x = self
      buff.write(_struct_fB2H.pack(_x.param_value, _x.param_type, _x.param_count, _x.param_index))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.sysid, _x.compid,) = _struct_2B.unpack(str[start:end])
      start = end
      end += 16
      self.param_id = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.param_value, _x.param_type, _x.param_count, _x.param_index,) = _struct_fB2H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_fB2H = struct.Struct("<fB2H")
_struct_16B = struct.Struct("<16B")
_struct_2B = struct.Struct("<2B")
_struct_16s = struct.Struct("<16s")
