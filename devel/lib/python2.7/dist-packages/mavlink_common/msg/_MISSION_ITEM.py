"""autogenerated by genpy from mavlink_common/MISSION_ITEM.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MISSION_ITEM(genpy.Message):
  _md5sum = "b56b1e45b73e933cc3d325df2fa7b2d0"
  _type = "mavlink_common/MISSION_ITEM"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Automatically Generated in 2014-08-12 13:24:39.907827
# MESSAGE: MISSION_ITEM
# Description:Message encoding a mission item. This message is emitted to announce
#                the presence of a mission item and to set a mission item on the system. The mission item can be either in x, y, z meters (type: LOCAL) or x:lat, y:lon, z:altitude. Local frame is Z-down, right handed (NED), global frame is Z-up, right handed (ENU). See also http://qgroundcontrol.org/mavlink/waypoint_protocol.
uint8 ID = 39
uint8 sysid
uint8 compid
uint8 target_system
uint8 target_component
uint16 seq
uint8 frame
uint16 command
uint8 current
uint8 autocontinue
float32 param1
float32 param2
float32 param3
float32 param4
float32 x
float32 y
float32 z

"""
  # Pseudo-constants
  ID = 39

  __slots__ = ['sysid','compid','target_system','target_component','seq','frame','command','current','autocontinue','param1','param2','param3','param4','x','y','z']
  _slot_types = ['uint8','uint8','uint8','uint8','uint16','uint8','uint16','uint8','uint8','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sysid,compid,target_system,target_component,seq,frame,command,current,autocontinue,param1,param2,param3,param4,x,y,z

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MISSION_ITEM, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sysid is None:
        self.sysid = 0
      if self.compid is None:
        self.compid = 0
      if self.target_system is None:
        self.target_system = 0
      if self.target_component is None:
        self.target_component = 0
      if self.seq is None:
        self.seq = 0
      if self.frame is None:
        self.frame = 0
      if self.command is None:
        self.command = 0
      if self.current is None:
        self.current = 0
      if self.autocontinue is None:
        self.autocontinue = 0
      if self.param1 is None:
        self.param1 = 0.
      if self.param2 is None:
        self.param2 = 0.
      if self.param3 is None:
        self.param3 = 0.
      if self.param4 is None:
        self.param4 = 0.
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.z is None:
        self.z = 0.
    else:
      self.sysid = 0
      self.compid = 0
      self.target_system = 0
      self.target_component = 0
      self.seq = 0
      self.frame = 0
      self.command = 0
      self.current = 0
      self.autocontinue = 0
      self.param1 = 0.
      self.param2 = 0.
      self.param3 = 0.
      self.param4 = 0.
      self.x = 0.
      self.y = 0.
      self.z = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4BHBH2B7f.pack(_x.sysid, _x.compid, _x.target_system, _x.target_component, _x.seq, _x.frame, _x.command, _x.current, _x.autocontinue, _x.param1, _x.param2, _x.param3, _x.param4, _x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 39
      (_x.sysid, _x.compid, _x.target_system, _x.target_component, _x.seq, _x.frame, _x.command, _x.current, _x.autocontinue, _x.param1, _x.param2, _x.param3, _x.param4, _x.x, _x.y, _x.z,) = _struct_4BHBH2B7f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4BHBH2B7f.pack(_x.sysid, _x.compid, _x.target_system, _x.target_component, _x.seq, _x.frame, _x.command, _x.current, _x.autocontinue, _x.param1, _x.param2, _x.param3, _x.param4, _x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 39
      (_x.sysid, _x.compid, _x.target_system, _x.target_component, _x.seq, _x.frame, _x.command, _x.current, _x.autocontinue, _x.param1, _x.param2, _x.param3, _x.param4, _x.x, _x.y, _x.z,) = _struct_4BHBH2B7f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4BHBH2B7f = struct.Struct("<4BHBH2B7f")
