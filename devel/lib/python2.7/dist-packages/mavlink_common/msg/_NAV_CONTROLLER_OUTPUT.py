"""autogenerated by genpy from mavlink_common/NAV_CONTROLLER_OUTPUT.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class NAV_CONTROLLER_OUTPUT(genpy.Message):
  _md5sum = "087841615473eaeeffaf17fc2cd95161"
  _type = "mavlink_common/NAV_CONTROLLER_OUTPUT"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Automatically Generated in 2014-08-12 13:24:39.909160
# MESSAGE: NAV_CONTROLLER_OUTPUT
# Description:Outputs of the APM navigation controller. The primary use of this message is to check the response and signs of the controller before actual flight and to assist with tuning controller parameters.
uint8 ID = 62
uint8 sysid
uint8 compid
float32 nav_roll
float32 nav_pitch
int16 nav_bearing
int16 target_bearing
uint16 wp_dist
float32 alt_error
float32 aspd_error
float32 xtrack_error

"""
  # Pseudo-constants
  ID = 62

  __slots__ = ['sysid','compid','nav_roll','nav_pitch','nav_bearing','target_bearing','wp_dist','alt_error','aspd_error','xtrack_error']
  _slot_types = ['uint8','uint8','float32','float32','int16','int16','uint16','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sysid,compid,nav_roll,nav_pitch,nav_bearing,target_bearing,wp_dist,alt_error,aspd_error,xtrack_error

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(NAV_CONTROLLER_OUTPUT, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sysid is None:
        self.sysid = 0
      if self.compid is None:
        self.compid = 0
      if self.nav_roll is None:
        self.nav_roll = 0.
      if self.nav_pitch is None:
        self.nav_pitch = 0.
      if self.nav_bearing is None:
        self.nav_bearing = 0
      if self.target_bearing is None:
        self.target_bearing = 0
      if self.wp_dist is None:
        self.wp_dist = 0
      if self.alt_error is None:
        self.alt_error = 0.
      if self.aspd_error is None:
        self.aspd_error = 0.
      if self.xtrack_error is None:
        self.xtrack_error = 0.
    else:
      self.sysid = 0
      self.compid = 0
      self.nav_roll = 0.
      self.nav_pitch = 0.
      self.nav_bearing = 0
      self.target_bearing = 0
      self.wp_dist = 0
      self.alt_error = 0.
      self.aspd_error = 0.
      self.xtrack_error = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2B2f2hH3f.pack(_x.sysid, _x.compid, _x.nav_roll, _x.nav_pitch, _x.nav_bearing, _x.target_bearing, _x.wp_dist, _x.alt_error, _x.aspd_error, _x.xtrack_error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.sysid, _x.compid, _x.nav_roll, _x.nav_pitch, _x.nav_bearing, _x.target_bearing, _x.wp_dist, _x.alt_error, _x.aspd_error, _x.xtrack_error,) = _struct_2B2f2hH3f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2B2f2hH3f.pack(_x.sysid, _x.compid, _x.nav_roll, _x.nav_pitch, _x.nav_bearing, _x.target_bearing, _x.wp_dist, _x.alt_error, _x.aspd_error, _x.xtrack_error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.sysid, _x.compid, _x.nav_roll, _x.nav_pitch, _x.nav_bearing, _x.target_bearing, _x.wp_dist, _x.alt_error, _x.aspd_error, _x.xtrack_error,) = _struct_2B2f2hH3f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2B2f2hH3f = struct.Struct("<2B2f2hH3f")
