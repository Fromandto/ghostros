"""autogenerated by genpy from mavlink_common/SETPOINT_8DOF.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SETPOINT_8DOF(genpy.Message):
  _md5sum = "429518d809bf62ee08d8262f864ce022"
  _type = "mavlink_common/SETPOINT_8DOF"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Automatically Generated in 2014-08-12 13:24:39.910763
# MESSAGE: SETPOINT_8DOF
# Description:Set the 8 DOF setpoint for a controller.
uint8 ID = 148
uint8 sysid
uint8 compid
uint8 target_system
float32 val1
float32 val2
float32 val3
float32 val4
float32 val5
float32 val6
float32 val7
float32 val8

"""
  # Pseudo-constants
  ID = 148

  __slots__ = ['sysid','compid','target_system','val1','val2','val3','val4','val5','val6','val7','val8']
  _slot_types = ['uint8','uint8','uint8','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sysid,compid,target_system,val1,val2,val3,val4,val5,val6,val7,val8

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SETPOINT_8DOF, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sysid is None:
        self.sysid = 0
      if self.compid is None:
        self.compid = 0
      if self.target_system is None:
        self.target_system = 0
      if self.val1 is None:
        self.val1 = 0.
      if self.val2 is None:
        self.val2 = 0.
      if self.val3 is None:
        self.val3 = 0.
      if self.val4 is None:
        self.val4 = 0.
      if self.val5 is None:
        self.val5 = 0.
      if self.val6 is None:
        self.val6 = 0.
      if self.val7 is None:
        self.val7 = 0.
      if self.val8 is None:
        self.val8 = 0.
    else:
      self.sysid = 0
      self.compid = 0
      self.target_system = 0
      self.val1 = 0.
      self.val2 = 0.
      self.val3 = 0.
      self.val4 = 0.
      self.val5 = 0.
      self.val6 = 0.
      self.val7 = 0.
      self.val8 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3B8f.pack(_x.sysid, _x.compid, _x.target_system, _x.val1, _x.val2, _x.val3, _x.val4, _x.val5, _x.val6, _x.val7, _x.val8))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 35
      (_x.sysid, _x.compid, _x.target_system, _x.val1, _x.val2, _x.val3, _x.val4, _x.val5, _x.val6, _x.val7, _x.val8,) = _struct_3B8f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3B8f.pack(_x.sysid, _x.compid, _x.target_system, _x.val1, _x.val2, _x.val3, _x.val4, _x.val5, _x.val6, _x.val7, _x.val8))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 35
      (_x.sysid, _x.compid, _x.target_system, _x.val1, _x.val2, _x.val3, _x.val4, _x.val5, _x.val6, _x.val7, _x.val8,) = _struct_3B8f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3B8f = struct.Struct("<3B8f")
