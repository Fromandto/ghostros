"""autogenerated by genpy from mavlink_common/SERVO_OUTPUT_RAW.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SERVO_OUTPUT_RAW(genpy.Message):
  _md5sum = "bd73f20744341b4183b4132ee719564f"
  _type = "mavlink_common/SERVO_OUTPUT_RAW"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Automatically Generated in 2014-08-12 13:24:39.907655
# MESSAGE: SERVO_OUTPUT_RAW
# Description:The RAW values of the servo outputs (for RC input from the remote, use the RC_CHANNELS messages). The standard PPM modulation is as follows: 1000 microseconds: 0%, 2000 microseconds: 100%.
uint8 ID = 36
uint8 sysid
uint8 compid
uint32 time_usec
uint8 port
uint16 servo1_raw
uint16 servo2_raw
uint16 servo3_raw
uint16 servo4_raw
uint16 servo5_raw
uint16 servo6_raw
uint16 servo7_raw
uint16 servo8_raw

"""
  # Pseudo-constants
  ID = 36

  __slots__ = ['sysid','compid','time_usec','port','servo1_raw','servo2_raw','servo3_raw','servo4_raw','servo5_raw','servo6_raw','servo7_raw','servo8_raw']
  _slot_types = ['uint8','uint8','uint32','uint8','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sysid,compid,time_usec,port,servo1_raw,servo2_raw,servo3_raw,servo4_raw,servo5_raw,servo6_raw,servo7_raw,servo8_raw

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SERVO_OUTPUT_RAW, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sysid is None:
        self.sysid = 0
      if self.compid is None:
        self.compid = 0
      if self.time_usec is None:
        self.time_usec = 0
      if self.port is None:
        self.port = 0
      if self.servo1_raw is None:
        self.servo1_raw = 0
      if self.servo2_raw is None:
        self.servo2_raw = 0
      if self.servo3_raw is None:
        self.servo3_raw = 0
      if self.servo4_raw is None:
        self.servo4_raw = 0
      if self.servo5_raw is None:
        self.servo5_raw = 0
      if self.servo6_raw is None:
        self.servo6_raw = 0
      if self.servo7_raw is None:
        self.servo7_raw = 0
      if self.servo8_raw is None:
        self.servo8_raw = 0
    else:
      self.sysid = 0
      self.compid = 0
      self.time_usec = 0
      self.port = 0
      self.servo1_raw = 0
      self.servo2_raw = 0
      self.servo3_raw = 0
      self.servo4_raw = 0
      self.servo5_raw = 0
      self.servo6_raw = 0
      self.servo7_raw = 0
      self.servo8_raw = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2BIB8H.pack(_x.sysid, _x.compid, _x.time_usec, _x.port, _x.servo1_raw, _x.servo2_raw, _x.servo3_raw, _x.servo4_raw, _x.servo5_raw, _x.servo6_raw, _x.servo7_raw, _x.servo8_raw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 23
      (_x.sysid, _x.compid, _x.time_usec, _x.port, _x.servo1_raw, _x.servo2_raw, _x.servo3_raw, _x.servo4_raw, _x.servo5_raw, _x.servo6_raw, _x.servo7_raw, _x.servo8_raw,) = _struct_2BIB8H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2BIB8H.pack(_x.sysid, _x.compid, _x.time_usec, _x.port, _x.servo1_raw, _x.servo2_raw, _x.servo3_raw, _x.servo4_raw, _x.servo5_raw, _x.servo6_raw, _x.servo7_raw, _x.servo8_raw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 23
      (_x.sysid, _x.compid, _x.time_usec, _x.port, _x.servo1_raw, _x.servo2_raw, _x.servo3_raw, _x.servo4_raw, _x.servo5_raw, _x.servo6_raw, _x.servo7_raw, _x.servo8_raw,) = _struct_2BIB8H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2BIB8H = struct.Struct("<2BIB8H")
