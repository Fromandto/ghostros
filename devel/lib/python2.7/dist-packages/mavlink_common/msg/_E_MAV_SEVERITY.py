"""autogenerated by genpy from mavlink_common/E_MAV_SEVERITY.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class E_MAV_SEVERITY(genpy.Message):
  _md5sum = "3c9c826d21086ebe7b1ad6435cc94edd"
  _type = "mavlink_common/E_MAV_SEVERITY"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Automatically Generated in <function get_timestamp at 0x2710500>
# ENUM: E_MAV_SEVERITY
# Description:Indicates the severity level, generally used for status messages to indicate their relative urgency. Based on RFC-5424 using expanded definitions at: http://www.kiwisyslog.com/kb/info:-syslog-message-levels/.
# System is unusable. This is a "panic" condition.
uint8 E_MAV_SEVERITY_EMERGENCY = 0
# Action should be taken immediately. Indicates error in non-critical systems.
uint8 E_MAV_SEVERITY_ALERT = 1
# Action must be taken immediately. Indicates failure in a primary system.
uint8 E_MAV_SEVERITY_CRITICAL = 2
# Indicates an error in secondary/redundant systems.
uint8 E_MAV_SEVERITY_ERROR = 3
# Indicates about a possible future error if this is not resolved within a given timeframe. Example would be a low battery warning.
uint8 E_MAV_SEVERITY_WARNING = 4
# An unusual event has occured, though not an error condition. This should be investigated for the root cause.
uint8 E_MAV_SEVERITY_NOTICE = 5
# Normal operational messages. Useful for logging. No action is required for these messages.
uint8 E_MAV_SEVERITY_INFO = 6
# Useful non-operational messages that can assist in debugging. These should not occur during normal operation.
uint8 E_MAV_SEVERITY_DEBUG = 7

"""
  # Pseudo-constants
  E_MAV_SEVERITY_EMERGENCY = 0
  E_MAV_SEVERITY_ALERT = 1
  E_MAV_SEVERITY_CRITICAL = 2
  E_MAV_SEVERITY_ERROR = 3
  E_MAV_SEVERITY_WARNING = 4
  E_MAV_SEVERITY_NOTICE = 5
  E_MAV_SEVERITY_INFO = 6
  E_MAV_SEVERITY_DEBUG = 7

  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(E_MAV_SEVERITY, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
