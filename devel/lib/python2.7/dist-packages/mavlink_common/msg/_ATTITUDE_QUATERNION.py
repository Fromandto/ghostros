"""autogenerated by genpy from mavlink_common/ATTITUDE_QUATERNION.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ATTITUDE_QUATERNION(genpy.Message):
  _md5sum = "88963a9c2789496248bcd10004c27d0b"
  _type = "mavlink_common/ATTITUDE_QUATERNION"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Automatically Generated in 2014-08-12 13:24:39.907357
# MESSAGE: ATTITUDE_QUATERNION
# Description:The attitude in the aeronautical frame (right-handed, Z-down, X-front, Y-right), expressed as quaternion.
uint8 ID = 31
uint8 sysid
uint8 compid
uint32 time_boot_ms
float32 q1
float32 q2
float32 q3
float32 q4
float32 rollspeed
float32 pitchspeed
float32 yawspeed

"""
  # Pseudo-constants
  ID = 31

  __slots__ = ['sysid','compid','time_boot_ms','q1','q2','q3','q4','rollspeed','pitchspeed','yawspeed']
  _slot_types = ['uint8','uint8','uint32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sysid,compid,time_boot_ms,q1,q2,q3,q4,rollspeed,pitchspeed,yawspeed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ATTITUDE_QUATERNION, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sysid is None:
        self.sysid = 0
      if self.compid is None:
        self.compid = 0
      if self.time_boot_ms is None:
        self.time_boot_ms = 0
      if self.q1 is None:
        self.q1 = 0.
      if self.q2 is None:
        self.q2 = 0.
      if self.q3 is None:
        self.q3 = 0.
      if self.q4 is None:
        self.q4 = 0.
      if self.rollspeed is None:
        self.rollspeed = 0.
      if self.pitchspeed is None:
        self.pitchspeed = 0.
      if self.yawspeed is None:
        self.yawspeed = 0.
    else:
      self.sysid = 0
      self.compid = 0
      self.time_boot_ms = 0
      self.q1 = 0.
      self.q2 = 0.
      self.q3 = 0.
      self.q4 = 0.
      self.rollspeed = 0.
      self.pitchspeed = 0.
      self.yawspeed = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2BI7f.pack(_x.sysid, _x.compid, _x.time_boot_ms, _x.q1, _x.q2, _x.q3, _x.q4, _x.rollspeed, _x.pitchspeed, _x.yawspeed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 34
      (_x.sysid, _x.compid, _x.time_boot_ms, _x.q1, _x.q2, _x.q3, _x.q4, _x.rollspeed, _x.pitchspeed, _x.yawspeed,) = _struct_2BI7f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2BI7f.pack(_x.sysid, _x.compid, _x.time_boot_ms, _x.q1, _x.q2, _x.q3, _x.q4, _x.rollspeed, _x.pitchspeed, _x.yawspeed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 34
      (_x.sysid, _x.compid, _x.time_boot_ms, _x.q1, _x.q2, _x.q3, _x.q4, _x.rollspeed, _x.pitchspeed, _x.yawspeed,) = _struct_2BI7f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2BI7f = struct.Struct("<2BI7f")
