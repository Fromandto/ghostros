"""autogenerated by genpy from mavlink_common/OPTICAL_FLOW.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class OPTICAL_FLOW(genpy.Message):
  _md5sum = "741988120376476abf12f5c88b823acc"
  _type = "mavlink_common/OPTICAL_FLOW"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Automatically Generated in 2014-08-12 13:24:39.910113
# MESSAGE: OPTICAL_FLOW
# Description:Optical flow from a flow sensor (e.g. optical mouse sensor)
uint8 ID = 100
uint8 sysid
uint8 compid
uint64 time_usec
uint8 sensor_id
int16 flow_x
int16 flow_y
float32 flow_comp_m_x
float32 flow_comp_m_y
uint8 quality
float32 ground_distance

"""
  # Pseudo-constants
  ID = 100

  __slots__ = ['sysid','compid','time_usec','sensor_id','flow_x','flow_y','flow_comp_m_x','flow_comp_m_y','quality','ground_distance']
  _slot_types = ['uint8','uint8','uint64','uint8','int16','int16','float32','float32','uint8','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sysid,compid,time_usec,sensor_id,flow_x,flow_y,flow_comp_m_x,flow_comp_m_y,quality,ground_distance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OPTICAL_FLOW, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sysid is None:
        self.sysid = 0
      if self.compid is None:
        self.compid = 0
      if self.time_usec is None:
        self.time_usec = 0
      if self.sensor_id is None:
        self.sensor_id = 0
      if self.flow_x is None:
        self.flow_x = 0
      if self.flow_y is None:
        self.flow_y = 0
      if self.flow_comp_m_x is None:
        self.flow_comp_m_x = 0.
      if self.flow_comp_m_y is None:
        self.flow_comp_m_y = 0.
      if self.quality is None:
        self.quality = 0
      if self.ground_distance is None:
        self.ground_distance = 0.
    else:
      self.sysid = 0
      self.compid = 0
      self.time_usec = 0
      self.sensor_id = 0
      self.flow_x = 0
      self.flow_y = 0
      self.flow_comp_m_x = 0.
      self.flow_comp_m_y = 0.
      self.quality = 0
      self.ground_distance = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2BQB2h2fBf.pack(_x.sysid, _x.compid, _x.time_usec, _x.sensor_id, _x.flow_x, _x.flow_y, _x.flow_comp_m_x, _x.flow_comp_m_y, _x.quality, _x.ground_distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.sysid, _x.compid, _x.time_usec, _x.sensor_id, _x.flow_x, _x.flow_y, _x.flow_comp_m_x, _x.flow_comp_m_y, _x.quality, _x.ground_distance,) = _struct_2BQB2h2fBf.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2BQB2h2fBf.pack(_x.sysid, _x.compid, _x.time_usec, _x.sensor_id, _x.flow_x, _x.flow_y, _x.flow_comp_m_x, _x.flow_comp_m_y, _x.quality, _x.ground_distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.sysid, _x.compid, _x.time_usec, _x.sensor_id, _x.flow_x, _x.flow_y, _x.flow_comp_m_x, _x.flow_comp_m_y, _x.quality, _x.ground_distance,) = _struct_2BQB2h2fBf.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2BQB2h2fBf = struct.Struct("<2BQB2h2fBf")
