"""autogenerated by genpy from mavlink_common/SYS_STATUS.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SYS_STATUS(genpy.Message):
  _md5sum = "acc0ece737cc800a9f1925f9824acaf8"
  _type = "mavlink_common/SYS_STATUS"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Automatically Generated in 2014-08-12 13:24:39.905967
# MESSAGE: SYS_STATUS
# Description:The general system state. If the system is following the MAVLink standard, the system state is mainly defined by three orthogonal states/modes: The system mode, which is either LOCKED (motors shut down and locked), MANUAL (system under RC control), GUIDED (system with autonomous position control, position setpoint controlled manually) or AUTO (system guided by path/waypoint planner). The NAV_MODE defined the current flight state: LIFTOFF (often an open-loop maneuver), LANDING, WAYPOINTS or VECTOR. This represents the internal navigation state machine. The system status shows wether the system is currently active or not and if an emergency occured. During the CRITICAL and EMERGENCY states the MAV is still considered to be active, but should start emergency procedures autonomously. After a failure occured it should first move from active to critical to allow manual intervention and then move to emergency after a certain timeout.
uint8 ID = 1
uint8 sysid
uint8 compid
uint32 onboard_control_sensors_present
uint32 onboard_control_sensors_enabled
uint32 onboard_control_sensors_health
uint16 load
uint16 voltage_battery
int16 current_battery
int8 battery_remaining
uint16 drop_rate_comm
uint16 errors_comm
uint16 errors_count1
uint16 errors_count2
uint16 errors_count3
uint16 errors_count4

"""
  # Pseudo-constants
  ID = 1

  __slots__ = ['sysid','compid','onboard_control_sensors_present','onboard_control_sensors_enabled','onboard_control_sensors_health','load','voltage_battery','current_battery','battery_remaining','drop_rate_comm','errors_comm','errors_count1','errors_count2','errors_count3','errors_count4']
  _slot_types = ['uint8','uint8','uint32','uint32','uint32','uint16','uint16','int16','int8','uint16','uint16','uint16','uint16','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sysid,compid,onboard_control_sensors_present,onboard_control_sensors_enabled,onboard_control_sensors_health,load,voltage_battery,current_battery,battery_remaining,drop_rate_comm,errors_comm,errors_count1,errors_count2,errors_count3,errors_count4

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SYS_STATUS, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sysid is None:
        self.sysid = 0
      if self.compid is None:
        self.compid = 0
      if self.onboard_control_sensors_present is None:
        self.onboard_control_sensors_present = 0
      if self.onboard_control_sensors_enabled is None:
        self.onboard_control_sensors_enabled = 0
      if self.onboard_control_sensors_health is None:
        self.onboard_control_sensors_health = 0
      if self.load is None:
        self.load = 0
      if self.voltage_battery is None:
        self.voltage_battery = 0
      if self.current_battery is None:
        self.current_battery = 0
      if self.battery_remaining is None:
        self.battery_remaining = 0
      if self.drop_rate_comm is None:
        self.drop_rate_comm = 0
      if self.errors_comm is None:
        self.errors_comm = 0
      if self.errors_count1 is None:
        self.errors_count1 = 0
      if self.errors_count2 is None:
        self.errors_count2 = 0
      if self.errors_count3 is None:
        self.errors_count3 = 0
      if self.errors_count4 is None:
        self.errors_count4 = 0
    else:
      self.sysid = 0
      self.compid = 0
      self.onboard_control_sensors_present = 0
      self.onboard_control_sensors_enabled = 0
      self.onboard_control_sensors_health = 0
      self.load = 0
      self.voltage_battery = 0
      self.current_battery = 0
      self.battery_remaining = 0
      self.drop_rate_comm = 0
      self.errors_comm = 0
      self.errors_count1 = 0
      self.errors_count2 = 0
      self.errors_count3 = 0
      self.errors_count4 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2B3I2Hhb6H.pack(_x.sysid, _x.compid, _x.onboard_control_sensors_present, _x.onboard_control_sensors_enabled, _x.onboard_control_sensors_health, _x.load, _x.voltage_battery, _x.current_battery, _x.battery_remaining, _x.drop_rate_comm, _x.errors_comm, _x.errors_count1, _x.errors_count2, _x.errors_count3, _x.errors_count4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 33
      (_x.sysid, _x.compid, _x.onboard_control_sensors_present, _x.onboard_control_sensors_enabled, _x.onboard_control_sensors_health, _x.load, _x.voltage_battery, _x.current_battery, _x.battery_remaining, _x.drop_rate_comm, _x.errors_comm, _x.errors_count1, _x.errors_count2, _x.errors_count3, _x.errors_count4,) = _struct_2B3I2Hhb6H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2B3I2Hhb6H.pack(_x.sysid, _x.compid, _x.onboard_control_sensors_present, _x.onboard_control_sensors_enabled, _x.onboard_control_sensors_health, _x.load, _x.voltage_battery, _x.current_battery, _x.battery_remaining, _x.drop_rate_comm, _x.errors_comm, _x.errors_count1, _x.errors_count2, _x.errors_count3, _x.errors_count4))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 33
      (_x.sysid, _x.compid, _x.onboard_control_sensors_present, _x.onboard_control_sensors_enabled, _x.onboard_control_sensors_health, _x.load, _x.voltage_battery, _x.current_battery, _x.battery_remaining, _x.drop_rate_comm, _x.errors_comm, _x.errors_count1, _x.errors_count2, _x.errors_count3, _x.errors_count4,) = _struct_2B3I2Hhb6H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2B3I2Hhb6H = struct.Struct("<2B3I2Hhb6H")
