"""autogenerated by genpy from mavlink_common/HIL_CONTROLS.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class HIL_CONTROLS(genpy.Message):
  _md5sum = "e815da09bbc4cca359acdcec587bf987"
  _type = "mavlink_common/HIL_CONTROLS"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Automatically Generated in 2014-08-12 13:24:39.909982
# MESSAGE: HIL_CONTROLS
# Description:Sent from autopilot to simulation. Hardware in the loop control outputs
uint8 ID = 91
uint8 sysid
uint8 compid
uint64 time_usec
float32 roll_ailerons
float32 pitch_elevator
float32 yaw_rudder
float32 throttle
float32 aux1
float32 aux2
float32 aux3
float32 aux4
uint8 mode
uint8 nav_mode

"""
  # Pseudo-constants
  ID = 91

  __slots__ = ['sysid','compid','time_usec','roll_ailerons','pitch_elevator','yaw_rudder','throttle','aux1','aux2','aux3','aux4','mode','nav_mode']
  _slot_types = ['uint8','uint8','uint64','float32','float32','float32','float32','float32','float32','float32','float32','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sysid,compid,time_usec,roll_ailerons,pitch_elevator,yaw_rudder,throttle,aux1,aux2,aux3,aux4,mode,nav_mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HIL_CONTROLS, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sysid is None:
        self.sysid = 0
      if self.compid is None:
        self.compid = 0
      if self.time_usec is None:
        self.time_usec = 0
      if self.roll_ailerons is None:
        self.roll_ailerons = 0.
      if self.pitch_elevator is None:
        self.pitch_elevator = 0.
      if self.yaw_rudder is None:
        self.yaw_rudder = 0.
      if self.throttle is None:
        self.throttle = 0.
      if self.aux1 is None:
        self.aux1 = 0.
      if self.aux2 is None:
        self.aux2 = 0.
      if self.aux3 is None:
        self.aux3 = 0.
      if self.aux4 is None:
        self.aux4 = 0.
      if self.mode is None:
        self.mode = 0
      if self.nav_mode is None:
        self.nav_mode = 0
    else:
      self.sysid = 0
      self.compid = 0
      self.time_usec = 0
      self.roll_ailerons = 0.
      self.pitch_elevator = 0.
      self.yaw_rudder = 0.
      self.throttle = 0.
      self.aux1 = 0.
      self.aux2 = 0.
      self.aux3 = 0.
      self.aux4 = 0.
      self.mode = 0
      self.nav_mode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2BQ8f2B.pack(_x.sysid, _x.compid, _x.time_usec, _x.roll_ailerons, _x.pitch_elevator, _x.yaw_rudder, _x.throttle, _x.aux1, _x.aux2, _x.aux3, _x.aux4, _x.mode, _x.nav_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.sysid, _x.compid, _x.time_usec, _x.roll_ailerons, _x.pitch_elevator, _x.yaw_rudder, _x.throttle, _x.aux1, _x.aux2, _x.aux3, _x.aux4, _x.mode, _x.nav_mode,) = _struct_2BQ8f2B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2BQ8f2B.pack(_x.sysid, _x.compid, _x.time_usec, _x.roll_ailerons, _x.pitch_elevator, _x.yaw_rudder, _x.throttle, _x.aux1, _x.aux2, _x.aux3, _x.aux4, _x.mode, _x.nav_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.sysid, _x.compid, _x.time_usec, _x.roll_ailerons, _x.pitch_elevator, _x.yaw_rudder, _x.throttle, _x.aux1, _x.aux2, _x.aux3, _x.aux4, _x.mode, _x.nav_mode,) = _struct_2BQ8f2B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2BQ8f2B = struct.Struct("<2BQ8f2B")
