"""autogenerated by genpy from mavlink_common/HIL_STATE.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class HIL_STATE(genpy.Message):
  _md5sum = "f59632974015c16b61ee8c8e85647385"
  _type = "mavlink_common/HIL_STATE"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Automatically Generated in 2014-08-12 13:24:39.909917
# MESSAGE: HIL_STATE
# Description:Sent from simulation to autopilot. This packet is useful for high throughput applications such as hardware in the loop simulations.
uint8 ID = 90
uint8 sysid
uint8 compid
uint64 time_usec
float32 roll
float32 pitch
float32 yaw
float32 rollspeed
float32 pitchspeed
float32 yawspeed
int32 lat
int32 lon
int32 alt
int16 vx
int16 vy
int16 vz
int16 xacc
int16 yacc
int16 zacc

"""
  # Pseudo-constants
  ID = 90

  __slots__ = ['sysid','compid','time_usec','roll','pitch','yaw','rollspeed','pitchspeed','yawspeed','lat','lon','alt','vx','vy','vz','xacc','yacc','zacc']
  _slot_types = ['uint8','uint8','uint64','float32','float32','float32','float32','float32','float32','int32','int32','int32','int16','int16','int16','int16','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sysid,compid,time_usec,roll,pitch,yaw,rollspeed,pitchspeed,yawspeed,lat,lon,alt,vx,vy,vz,xacc,yacc,zacc

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HIL_STATE, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sysid is None:
        self.sysid = 0
      if self.compid is None:
        self.compid = 0
      if self.time_usec is None:
        self.time_usec = 0
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.rollspeed is None:
        self.rollspeed = 0.
      if self.pitchspeed is None:
        self.pitchspeed = 0.
      if self.yawspeed is None:
        self.yawspeed = 0.
      if self.lat is None:
        self.lat = 0
      if self.lon is None:
        self.lon = 0
      if self.alt is None:
        self.alt = 0
      if self.vx is None:
        self.vx = 0
      if self.vy is None:
        self.vy = 0
      if self.vz is None:
        self.vz = 0
      if self.xacc is None:
        self.xacc = 0
      if self.yacc is None:
        self.yacc = 0
      if self.zacc is None:
        self.zacc = 0
    else:
      self.sysid = 0
      self.compid = 0
      self.time_usec = 0
      self.roll = 0.
      self.pitch = 0.
      self.yaw = 0.
      self.rollspeed = 0.
      self.pitchspeed = 0.
      self.yawspeed = 0.
      self.lat = 0
      self.lon = 0
      self.alt = 0
      self.vx = 0
      self.vy = 0
      self.vz = 0
      self.xacc = 0
      self.yacc = 0
      self.zacc = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2BQ6f3i6h.pack(_x.sysid, _x.compid, _x.time_usec, _x.roll, _x.pitch, _x.yaw, _x.rollspeed, _x.pitchspeed, _x.yawspeed, _x.lat, _x.lon, _x.alt, _x.vx, _x.vy, _x.vz, _x.xacc, _x.yacc, _x.zacc))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 58
      (_x.sysid, _x.compid, _x.time_usec, _x.roll, _x.pitch, _x.yaw, _x.rollspeed, _x.pitchspeed, _x.yawspeed, _x.lat, _x.lon, _x.alt, _x.vx, _x.vy, _x.vz, _x.xacc, _x.yacc, _x.zacc,) = _struct_2BQ6f3i6h.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2BQ6f3i6h.pack(_x.sysid, _x.compid, _x.time_usec, _x.roll, _x.pitch, _x.yaw, _x.rollspeed, _x.pitchspeed, _x.yawspeed, _x.lat, _x.lon, _x.alt, _x.vx, _x.vy, _x.vz, _x.xacc, _x.yacc, _x.zacc))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 58
      (_x.sysid, _x.compid, _x.time_usec, _x.roll, _x.pitch, _x.yaw, _x.rollspeed, _x.pitchspeed, _x.yawspeed, _x.lat, _x.lon, _x.alt, _x.vx, _x.vy, _x.vz, _x.xacc, _x.yacc, _x.zacc,) = _struct_2BQ6f3i6h.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2BQ6f3i6h = struct.Struct("<2BQ6f3i6h")
