"""autogenerated by genpy from mavlink_common/GPS_RAW_INT.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GPS_RAW_INT(genpy.Message):
  _md5sum = "242a091ee23b086bb210689d9d7b186c"
  _type = "mavlink_common/GPS_RAW_INT"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Automatically Generated in 2014-08-12 13:24:39.906796
# MESSAGE: GPS_RAW_INT
# Description:The global position, as returned by the Global Positioning System (GPS). This is
#                NOT the global position estimate of the sytem, but rather a RAW sensor value. See message GLOBAL_POSITION for the global position estimate. Coordinate frame is right-handed, Z-axis up (GPS frame).
uint8 ID = 24
uint8 sysid
uint8 compid
uint64 time_usec
uint8 fix_type
int32 lat
int32 lon
int32 alt
uint16 eph
uint16 epv
uint16 vel
uint16 cog
uint8 satellites_visible

"""
  # Pseudo-constants
  ID = 24

  __slots__ = ['sysid','compid','time_usec','fix_type','lat','lon','alt','eph','epv','vel','cog','satellites_visible']
  _slot_types = ['uint8','uint8','uint64','uint8','int32','int32','int32','uint16','uint16','uint16','uint16','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sysid,compid,time_usec,fix_type,lat,lon,alt,eph,epv,vel,cog,satellites_visible

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GPS_RAW_INT, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sysid is None:
        self.sysid = 0
      if self.compid is None:
        self.compid = 0
      if self.time_usec is None:
        self.time_usec = 0
      if self.fix_type is None:
        self.fix_type = 0
      if self.lat is None:
        self.lat = 0
      if self.lon is None:
        self.lon = 0
      if self.alt is None:
        self.alt = 0
      if self.eph is None:
        self.eph = 0
      if self.epv is None:
        self.epv = 0
      if self.vel is None:
        self.vel = 0
      if self.cog is None:
        self.cog = 0
      if self.satellites_visible is None:
        self.satellites_visible = 0
    else:
      self.sysid = 0
      self.compid = 0
      self.time_usec = 0
      self.fix_type = 0
      self.lat = 0
      self.lon = 0
      self.alt = 0
      self.eph = 0
      self.epv = 0
      self.vel = 0
      self.cog = 0
      self.satellites_visible = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2BQB3i4HB.pack(_x.sysid, _x.compid, _x.time_usec, _x.fix_type, _x.lat, _x.lon, _x.alt, _x.eph, _x.epv, _x.vel, _x.cog, _x.satellites_visible))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.sysid, _x.compid, _x.time_usec, _x.fix_type, _x.lat, _x.lon, _x.alt, _x.eph, _x.epv, _x.vel, _x.cog, _x.satellites_visible,) = _struct_2BQB3i4HB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2BQB3i4HB.pack(_x.sysid, _x.compid, _x.time_usec, _x.fix_type, _x.lat, _x.lon, _x.alt, _x.eph, _x.epv, _x.vel, _x.cog, _x.satellites_visible))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.sysid, _x.compid, _x.time_usec, _x.fix_type, _x.lat, _x.lon, _x.alt, _x.eph, _x.epv, _x.vel, _x.cog, _x.satellites_visible,) = _struct_2BQB3i4HB.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2BQB3i4HB = struct.Struct("<2BQB3i4HB")
