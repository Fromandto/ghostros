"""autogenerated by genpy from mavlink_common/E_MAV_CMD_ACK.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class E_MAV_CMD_ACK(genpy.Message):
  _md5sum = "b61741c359ed1a4150e49a0a9e52b9e0"
  _type = "mavlink_common/E_MAV_CMD_ACK"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Automatically Generated in <function get_timestamp at 0x2710500>
# ENUM: E_MAV_CMD_ACK
# Description:ACK / NACK / ERROR values as a result of MAV_CMDs and for mission item transmission.
# Command / mission item is ok.
uint8 E_MAV_CMD_ACK_OK = 1
# Generic error message if none of the other reasons fails or if no detailed error reporting is implemented.
uint8 E_MAV_CMD_ACK_ERR_FAIL = 2
# The system is refusing to accept this command from this source / communication partner.
uint8 E_MAV_CMD_ACK_ERR_ACCESS_DENIED = 3
# Command or mission item is not supported, other commands would be accepted.
uint8 E_MAV_CMD_ACK_ERR_NOT_SUPPORTED = 4
# The coordinate frame of this command / mission item is not supported.
uint8 E_MAV_CMD_ACK_ERR_COORDINATE_FRAME_NOT_SUPPORTED = 5
# The coordinate frame of this command is ok, but he coordinate values exceed the safety limits of this system. This is a generic error, please use the more specific error messages below if possible.
uint8 E_MAV_CMD_ACK_ERR_COORDINATES_OUT_OF_RANGE = 6
# The X or latitude value is out of range.
uint8 E_MAV_CMD_ACK_ERR_X_LAT_OUT_OF_RANGE = 7
# The Y or longitude value is out of range.
uint8 E_MAV_CMD_ACK_ERR_Y_LON_OUT_OF_RANGE = 8
# The Z or altitude value is out of range.
uint8 E_MAV_CMD_ACK_ERR_Z_ALT_OUT_OF_RANGE = 9

"""
  # Pseudo-constants
  E_MAV_CMD_ACK_OK = 1
  E_MAV_CMD_ACK_ERR_FAIL = 2
  E_MAV_CMD_ACK_ERR_ACCESS_DENIED = 3
  E_MAV_CMD_ACK_ERR_NOT_SUPPORTED = 4
  E_MAV_CMD_ACK_ERR_COORDINATE_FRAME_NOT_SUPPORTED = 5
  E_MAV_CMD_ACK_ERR_COORDINATES_OUT_OF_RANGE = 6
  E_MAV_CMD_ACK_ERR_X_LAT_OUT_OF_RANGE = 7
  E_MAV_CMD_ACK_ERR_Y_LON_OUT_OF_RANGE = 8
  E_MAV_CMD_ACK_ERR_Z_ALT_OUT_OF_RANGE = 9

  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(E_MAV_CMD_ACK, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
