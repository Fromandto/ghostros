"""autogenerated by genpy from mavlink_common/PARAM_REQUEST_READ.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PARAM_REQUEST_READ(genpy.Message):
  _md5sum = "206ff2df327ffde87cfcc0223ec68b5a"
  _type = "mavlink_common/PARAM_REQUEST_READ"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Automatically Generated in 2014-08-12 13:24:39.906537
# MESSAGE: PARAM_REQUEST_READ
# Description:Request to read the onboard parameter with the param_id string id. Onboard parameters are stored as key[const char*] -> value[float]. This allows to send a parameter to any other component (such as the GCS) without the need of previous knowledge of possible parameter names. Thus the same GCS can store different parameters for different autopilots. See also http://qgroundcontrol.org/parameter_interface for a full documentation of QGroundControl and IMU code.
uint8 ID = 20
uint8 sysid
uint8 compid
uint8 target_system
uint8 target_component
char[16] param_id
int16 param_index

"""
  # Pseudo-constants
  ID = 20

  __slots__ = ['sysid','compid','target_system','target_component','param_id','param_index']
  _slot_types = ['uint8','uint8','uint8','uint8','char[16]','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sysid,compid,target_system,target_component,param_id,param_index

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PARAM_REQUEST_READ, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sysid is None:
        self.sysid = 0
      if self.compid is None:
        self.compid = 0
      if self.target_system is None:
        self.target_system = 0
      if self.target_component is None:
        self.target_component = 0
      if self.param_id is None:
        self.param_id = chr(0)*16
      if self.param_index is None:
        self.param_index = 0
    else:
      self.sysid = 0
      self.compid = 0
      self.target_system = 0
      self.target_component = 0
      self.param_id = chr(0)*16
      self.param_index = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4B.pack(_x.sysid, _x.compid, _x.target_system, _x.target_component))
      _x = self.param_id
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_16B.pack(*_x))
      else:
        buff.write(_struct_16s.pack(_x))
      buff.write(_struct_h.pack(self.param_index))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.sysid, _x.compid, _x.target_system, _x.target_component,) = _struct_4B.unpack(str[start:end])
      start = end
      end += 16
      self.param_id = str[start:end]
      start = end
      end += 2
      (self.param_index,) = _struct_h.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4B.pack(_x.sysid, _x.compid, _x.target_system, _x.target_component))
      _x = self.param_id
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_16B.pack(*_x))
      else:
        buff.write(_struct_16s.pack(_x))
      buff.write(_struct_h.pack(self.param_index))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 4
      (_x.sysid, _x.compid, _x.target_system, _x.target_component,) = _struct_4B.unpack(str[start:end])
      start = end
      end += 16
      self.param_id = str[start:end]
      start = end
      end += 2
      (self.param_index,) = _struct_h.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_h = struct.Struct("<h")
_struct_4B = struct.Struct("<4B")
_struct_16B = struct.Struct("<16B")
_struct_16s = struct.Struct("<16s")
