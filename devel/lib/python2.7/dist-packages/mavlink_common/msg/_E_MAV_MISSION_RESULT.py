"""autogenerated by genpy from mavlink_common/E_MAV_MISSION_RESULT.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class E_MAV_MISSION_RESULT(genpy.Message):
  _md5sum = "bf3d400ba1973c057360595e4ad29d06"
  _type = "mavlink_common/E_MAV_MISSION_RESULT"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Automatically Generated in <function get_timestamp at 0x2710500>
# ENUM: E_MAV_MISSION_RESULT
# Description:result in a mavlink mission ack
# mission accepted OK
uint8 E_MAV_MISSION_ACCEPTED = 0
# generic error / not accepting mission commands at all right now
uint8 E_MAV_MISSION_ERROR = 1
# coordinate frame is not supported
uint8 E_MAV_MISSION_UNSUPPORTED_FRAME = 2
# command is not supported
uint8 E_MAV_MISSION_UNSUPPORTED = 3
# mission item exceeds storage space
uint8 E_MAV_MISSION_NO_SPACE = 4
# one of the parameters has an invalid value
uint8 E_MAV_MISSION_INVALID = 5
# param1 has an invalid value
uint8 E_MAV_MISSION_INVALID_PARAM1 = 6
# param2 has an invalid value
uint8 E_MAV_MISSION_INVALID_PARAM2 = 7
# param3 has an invalid value
uint8 E_MAV_MISSION_INVALID_PARAM3 = 8
# param4 has an invalid value
uint8 E_MAV_MISSION_INVALID_PARAM4 = 9
# x/param5 has an invalid value
uint8 E_MAV_MISSION_INVALID_PARAM5_X = 10
# y/param6 has an invalid value
uint8 E_MAV_MISSION_INVALID_PARAM6_Y = 11
# param7 has an invalid value
uint8 E_MAV_MISSION_INVALID_PARAM7 = 12
# received waypoint out of sequence
uint8 E_MAV_MISSION_INVALID_SEQUENCE = 13
# not accepting any mission commands from this communication partner
uint8 E_MAV_MISSION_DENIED = 14

"""
  # Pseudo-constants
  E_MAV_MISSION_ACCEPTED = 0
  E_MAV_MISSION_ERROR = 1
  E_MAV_MISSION_UNSUPPORTED_FRAME = 2
  E_MAV_MISSION_UNSUPPORTED = 3
  E_MAV_MISSION_NO_SPACE = 4
  E_MAV_MISSION_INVALID = 5
  E_MAV_MISSION_INVALID_PARAM1 = 6
  E_MAV_MISSION_INVALID_PARAM2 = 7
  E_MAV_MISSION_INVALID_PARAM3 = 8
  E_MAV_MISSION_INVALID_PARAM4 = 9
  E_MAV_MISSION_INVALID_PARAM5_X = 10
  E_MAV_MISSION_INVALID_PARAM6_Y = 11
  E_MAV_MISSION_INVALID_PARAM7 = 12
  E_MAV_MISSION_INVALID_SEQUENCE = 13
  E_MAV_MISSION_DENIED = 14

  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(E_MAV_MISSION_RESULT, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
