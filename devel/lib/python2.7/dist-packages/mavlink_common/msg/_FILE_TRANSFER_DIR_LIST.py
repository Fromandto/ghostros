"""autogenerated by genpy from mavlink_common/FILE_TRANSFER_DIR_LIST.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FILE_TRANSFER_DIR_LIST(genpy.Message):
  _md5sum = "c795eb4cd4db874ebb72b403ff7c36a0"
  _type = "mavlink_common/FILE_TRANSFER_DIR_LIST"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Automatically Generated in 2014-08-12 13:24:39.910593
# MESSAGE: FILE_TRANSFER_DIR_LIST
# Description:Get directory listing
uint8 ID = 111
uint8 sysid
uint8 compid
uint64 transfer_uid
char[240] dir_path
uint8 flags

"""
  # Pseudo-constants
  ID = 111

  __slots__ = ['sysid','compid','transfer_uid','dir_path','flags']
  _slot_types = ['uint8','uint8','uint64','char[240]','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       sysid,compid,transfer_uid,dir_path,flags

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FILE_TRANSFER_DIR_LIST, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.sysid is None:
        self.sysid = 0
      if self.compid is None:
        self.compid = 0
      if self.transfer_uid is None:
        self.transfer_uid = 0
      if self.dir_path is None:
        self.dir_path = chr(0)*240
      if self.flags is None:
        self.flags = 0
    else:
      self.sysid = 0
      self.compid = 0
      self.transfer_uid = 0
      self.dir_path = chr(0)*240
      self.flags = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2BQ.pack(_x.sysid, _x.compid, _x.transfer_uid))
      _x = self.dir_path
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_240B.pack(*_x))
      else:
        buff.write(_struct_240s.pack(_x))
      buff.write(_struct_B.pack(self.flags))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.sysid, _x.compid, _x.transfer_uid,) = _struct_2BQ.unpack(str[start:end])
      start = end
      end += 240
      self.dir_path = str[start:end]
      start = end
      end += 1
      (self.flags,) = _struct_B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2BQ.pack(_x.sysid, _x.compid, _x.transfer_uid))
      _x = self.dir_path
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_240B.pack(*_x))
      else:
        buff.write(_struct_240s.pack(_x))
      buff.write(_struct_B.pack(self.flags))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.sysid, _x.compid, _x.transfer_uid,) = _struct_2BQ.unpack(str[start:end])
      start = end
      end += 240
      self.dir_path = str[start:end]
      start = end
      end += 1
      (self.flags,) = _struct_B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
_struct_240B = struct.Struct("<240B")
_struct_240s = struct.Struct("<240s")
_struct_2BQ = struct.Struct("<2BQ")
