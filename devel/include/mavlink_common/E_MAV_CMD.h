/* Software License Agreement (BSD License)
 *
 * Copyright (c) 2011, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Willow Garage, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Auto-generated by genmsg_cpp from file /root/ehang_ws/src/ghost/mavlink_common/msg/E_MAV_CMD.msg
 *
 */


#ifndef MAVLINK_COMMON_MESSAGE_E_MAV_CMD_H
#define MAVLINK_COMMON_MESSAGE_E_MAV_CMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mavlink_common
{
template <class ContainerAllocator>
struct E_MAV_CMD_
{
  typedef E_MAV_CMD_<ContainerAllocator> Type;

  E_MAV_CMD_()
    {
    }
  E_MAV_CMD_(const ContainerAllocator& _alloc)
    {
    }




    enum { E_MAV_CMD_NAV_WAYPOINT = 16 };
     enum { E_MAV_CMD_NAV_LOITER_UNLIM = 17 };
     enum { E_MAV_CMD_NAV_LOITER_TURNS = 18 };
     enum { E_MAV_CMD_NAV_LOITER_TIME = 19 };
     enum { E_MAV_CMD_NAV_RETURN_TO_LAUNCH = 20 };
     enum { E_MAV_CMD_NAV_LAND = 21 };
     enum { E_MAV_CMD_NAV_TAKEOFF = 22 };
     enum { E_MAV_CMD_NAV_ROI = 80 };
     enum { E_MAV_CMD_NAV_PATHPLANNING = 81 };
     enum { E_MAV_CMD_NAV_LAST = 95 };
     enum { E_MAV_CMD_CONDITION_DELAY = 112 };
     enum { E_MAV_CMD_CONDITION_CHANGE_ALT = 113 };
     enum { E_MAV_CMD_CONDITION_DISTANCE = 114 };
     enum { E_MAV_CMD_CONDITION_YAW = 115 };
     enum { E_MAV_CMD_CONDITION_LAST = 159 };
     enum { E_MAV_CMD_DO_SET_MODE = 176 };
     enum { E_MAV_CMD_DO_JUMP = 177 };
     enum { E_MAV_CMD_DO_CHANGE_SPEED = 178 };
     enum { E_MAV_CMD_DO_SET_HOME = 179 };
     enum { E_MAV_CMD_DO_SET_PARAMETER = 180 };
     enum { E_MAV_CMD_DO_SET_RELAY = 181 };
     enum { E_MAV_CMD_DO_REPEAT_RELAY = 182 };
     enum { E_MAV_CMD_DO_SET_SERVO = 183 };
     enum { E_MAV_CMD_DO_REPEAT_SERVO = 184 };
     enum { E_MAV_CMD_DO_CONTROL_VIDEO = 200 };
     enum { E_MAV_CMD_DO_LAST = 240 };
     enum { E_MAV_CMD_PREFLIGHT_CALIBRATION = 241 };
     enum { E_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS = 242 };
     enum { E_MAV_CMD_PREFLIGHT_STORAGE = 245 };
     enum { E_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN = 246 };
     enum { E_MAV_CMD_OVERRIDE_GOTO = 252 };
     enum { E_MAV_CMD_MISSION_START = 300 };
     enum { E_MAV_CMD_COMPONENT_ARM_DISARM = 400 };
 

  typedef boost::shared_ptr< ::mavlink_common::E_MAV_CMD_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavlink_common::E_MAV_CMD_<ContainerAllocator> const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;

}; // struct E_MAV_CMD_

typedef ::mavlink_common::E_MAV_CMD_<std::allocator<void> > E_MAV_CMD;

typedef boost::shared_ptr< ::mavlink_common::E_MAV_CMD > E_MAV_CMDPtr;
typedef boost::shared_ptr< ::mavlink_common::E_MAV_CMD const> E_MAV_CMDConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavlink_common::E_MAV_CMD_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavlink_common::E_MAV_CMD_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mavlink_common

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/hydro/share/std_msgs/cmake/../msg'], 'mavlink_common': ['/root/ehang_ws/src/ghost/mavlink_common/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_common::E_MAV_CMD_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_common::E_MAV_CMD_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavlink_common::E_MAV_CMD_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavlink_common::E_MAV_CMD_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_common::E_MAV_CMD_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_common::E_MAV_CMD_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavlink_common::E_MAV_CMD_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a689c833091c81e36d6fa77e33b739f4";
  }

  static const char* value(const ::mavlink_common::E_MAV_CMD_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa689c833091c81e3ULL;
  static const uint64_t static_value2 = 0x6d6fa77e33b739f4ULL;
};

template<class ContainerAllocator>
struct DataType< ::mavlink_common::E_MAV_CMD_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavlink_common/E_MAV_CMD";
  }

  static const char* value(const ::mavlink_common::E_MAV_CMD_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavlink_common::E_MAV_CMD_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Automatically Generated in <function get_timestamp at 0x2710500>\n\
# ENUM: E_MAV_CMD\n\
# Description:Commands to be executed by the MAV. They can be executed on user request, or as part of a mission script. If the action is used in a mission, the parameter mapping to the waypoint/mission message is as follows: Param 1, Param 2, Param 3, Param 4, X: Param 5, Y:Param 6, Z:Param 7. This command list is similar what ARINC 424 is for commercial aircraft: A data format how to interpret waypoint/mission data.\n\
# Navigate to MISSION.\n\
uint8 E_MAV_CMD_NAV_WAYPOINT = 16\n\
# Loiter around this MISSION an unlimited amount of time\n\
uint8 E_MAV_CMD_NAV_LOITER_UNLIM = 17\n\
# Loiter around this MISSION for X turns\n\
uint8 E_MAV_CMD_NAV_LOITER_TURNS = 18\n\
# Loiter around this MISSION for X seconds\n\
uint8 E_MAV_CMD_NAV_LOITER_TIME = 19\n\
# Return to launch location\n\
uint8 E_MAV_CMD_NAV_RETURN_TO_LAUNCH = 20\n\
# Land at location\n\
uint8 E_MAV_CMD_NAV_LAND = 21\n\
# Takeoff from ground / hand\n\
uint8 E_MAV_CMD_NAV_TAKEOFF = 22\n\
# Sets the region of interest (ROI) for a sensor set or the vehicle itself. This can then be used by the vehicles control system to control the vehicle attitude and the attitude of various sensors such as cameras.\n\
uint8 E_MAV_CMD_NAV_ROI = 80\n\
# Control autonomous path planning on the MAV.\n\
uint8 E_MAV_CMD_NAV_PATHPLANNING = 81\n\
# NOP - This command is only used to mark the upper limit of the NAV/ACTION commands in the enumeration\n\
uint8 E_MAV_CMD_NAV_LAST = 95\n\
# Delay mission state machine.\n\
uint8 E_MAV_CMD_CONDITION_DELAY = 112\n\
# Ascend/descend at rate.  Delay mission state machine until desired altitude reached.\n\
uint8 E_MAV_CMD_CONDITION_CHANGE_ALT = 113\n\
# Delay mission state machine until within desired distance of next NAV point.\n\
uint8 E_MAV_CMD_CONDITION_DISTANCE = 114\n\
# Reach a certain target angle.\n\
uint8 E_MAV_CMD_CONDITION_YAW = 115\n\
# NOP - This command is only used to mark the upper limit of the CONDITION commands in the enumeration\n\
uint8 E_MAV_CMD_CONDITION_LAST = 159\n\
# Set system mode.\n\
uint8 E_MAV_CMD_DO_SET_MODE = 176\n\
# Jump to the desired command in the mission list.  Repeat this action only the specified number of times\n\
uint8 E_MAV_CMD_DO_JUMP = 177\n\
# Change speed and/or throttle set points.\n\
uint8 E_MAV_CMD_DO_CHANGE_SPEED = 178\n\
# Changes the home location either to the current location or a specified location.\n\
uint8 E_MAV_CMD_DO_SET_HOME = 179\n\
# Set a system parameter.  Caution!  Use of this command requires knowledge of the numeric enumeration value of the parameter.\n\
uint8 E_MAV_CMD_DO_SET_PARAMETER = 180\n\
# Set a relay to a condition.\n\
uint8 E_MAV_CMD_DO_SET_RELAY = 181\n\
# Cycle a relay on and off for a desired number of cyles with a desired period.\n\
uint8 E_MAV_CMD_DO_REPEAT_RELAY = 182\n\
# Set a servo to a desired PWM value.\n\
uint8 E_MAV_CMD_DO_SET_SERVO = 183\n\
# Cycle a between its nominal setting and a desired PWM for a desired number of cycles with a desired period.\n\
uint8 E_MAV_CMD_DO_REPEAT_SERVO = 184\n\
# Control onboard camera system.\n\
uint8 E_MAV_CMD_DO_CONTROL_VIDEO = 200\n\
# NOP - This command is only used to mark the upper limit of the DO commands in the enumeration\n\
uint8 E_MAV_CMD_DO_LAST = 240\n\
# Trigger calibration. This command will be only accepted if in pre-flight mode.\n\
uint8 E_MAV_CMD_PREFLIGHT_CALIBRATION = 241\n\
# Set sensor offsets. This command will be only accepted if in pre-flight mode.\n\
uint8 E_MAV_CMD_PREFLIGHT_SET_SENSOR_OFFSETS = 242\n\
# Request storage of different parameter values and logs. This command will be only accepted if in pre-flight mode.\n\
uint8 E_MAV_CMD_PREFLIGHT_STORAGE = 245\n\
# Request the reboot or shutdown of system components.\n\
uint8 E_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN = 246\n\
# Hold / continue the current action\n\
uint8 E_MAV_CMD_OVERRIDE_GOTO = 252\n\
# start running a mission\n\
uint16 E_MAV_CMD_MISSION_START = 300\n\
# Arms / Disarms a component\n\
uint16 E_MAV_CMD_COMPONENT_ARM_DISARM = 400\n\
";
  }

  static const char* value(const ::mavlink_common::E_MAV_CMD_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavlink_common::E_MAV_CMD_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct E_MAV_CMD_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavlink_common::E_MAV_CMD_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::mavlink_common::E_MAV_CMD_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // MAVLINK_COMMON_MESSAGE_E_MAV_CMD_H
