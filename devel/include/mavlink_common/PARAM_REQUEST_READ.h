/* Software License Agreement (BSD License)
 *
 * Copyright (c) 2011, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Willow Garage, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Auto-generated by genmsg_cpp from file /root/ehang_ws/src/ghost/mavlink_common/msg/PARAM_REQUEST_READ.msg
 *
 */


#ifndef MAVLINK_COMMON_MESSAGE_PARAM_REQUEST_READ_H
#define MAVLINK_COMMON_MESSAGE_PARAM_REQUEST_READ_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mavlink_common
{
template <class ContainerAllocator>
struct PARAM_REQUEST_READ_
{
  typedef PARAM_REQUEST_READ_<ContainerAllocator> Type;

  PARAM_REQUEST_READ_()
    : sysid(0)
    , compid(0)
    , target_system(0)
    , target_component(0)
    , param_id()
    , param_index(0)  {
      param_id.assign(0);
  }
  PARAM_REQUEST_READ_(const ContainerAllocator& _alloc)
    : sysid(0)
    , compid(0)
    , target_system(0)
    , target_component(0)
    , param_id()
    , param_index(0)  {
      param_id.assign(0);
  }



   typedef uint8_t _sysid_type;
  _sysid_type sysid;

   typedef uint8_t _compid_type;
  _compid_type compid;

   typedef uint8_t _target_system_type;
  _target_system_type target_system;

   typedef uint8_t _target_component_type;
  _target_component_type target_component;

   typedef boost::array<uint8_t, 16>  _param_id_type;
  _param_id_type param_id;

   typedef int16_t _param_index_type;
  _param_index_type param_index;


    enum { ID = 20 };
 

  typedef boost::shared_ptr< ::mavlink_common::PARAM_REQUEST_READ_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavlink_common::PARAM_REQUEST_READ_<ContainerAllocator> const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;

}; // struct PARAM_REQUEST_READ_

typedef ::mavlink_common::PARAM_REQUEST_READ_<std::allocator<void> > PARAM_REQUEST_READ;

typedef boost::shared_ptr< ::mavlink_common::PARAM_REQUEST_READ > PARAM_REQUEST_READPtr;
typedef boost::shared_ptr< ::mavlink_common::PARAM_REQUEST_READ const> PARAM_REQUEST_READConstPtr;

// constants requiring out of line definition

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavlink_common::PARAM_REQUEST_READ_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavlink_common::PARAM_REQUEST_READ_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mavlink_common

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/hydro/share/std_msgs/cmake/../msg'], 'mavlink_common': ['/root/ehang_ws/src/ghost/mavlink_common/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_common::PARAM_REQUEST_READ_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_common::PARAM_REQUEST_READ_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavlink_common::PARAM_REQUEST_READ_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavlink_common::PARAM_REQUEST_READ_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_common::PARAM_REQUEST_READ_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_common::PARAM_REQUEST_READ_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavlink_common::PARAM_REQUEST_READ_<ContainerAllocator> >
{
  static const char* value()
  {
    return "206ff2df327ffde87cfcc0223ec68b5a";
  }

  static const char* value(const ::mavlink_common::PARAM_REQUEST_READ_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x206ff2df327ffde8ULL;
  static const uint64_t static_value2 = 0x7cfcc0223ec68b5aULL;
};

template<class ContainerAllocator>
struct DataType< ::mavlink_common::PARAM_REQUEST_READ_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavlink_common/PARAM_REQUEST_READ";
  }

  static const char* value(const ::mavlink_common::PARAM_REQUEST_READ_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavlink_common::PARAM_REQUEST_READ_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Automatically Generated in 2014-08-12 13:24:39.906537\n\
# MESSAGE: PARAM_REQUEST_READ\n\
# Description:Request to read the onboard parameter with the param_id string id. Onboard parameters are stored as key[const char*] -> value[float]. This allows to send a parameter to any other component (such as the GCS) without the need of previous knowledge of possible parameter names. Thus the same GCS can store different parameters for different autopilots. See also http://qgroundcontrol.org/parameter_interface for a full documentation of QGroundControl and IMU code.\n\
uint8 ID = 20\n\
uint8 sysid\n\
uint8 compid\n\
uint8 target_system\n\
uint8 target_component\n\
char[16] param_id\n\
int16 param_index\n\
";
  }

  static const char* value(const ::mavlink_common::PARAM_REQUEST_READ_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavlink_common::PARAM_REQUEST_READ_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sysid);
      stream.next(m.compid);
      stream.next(m.target_system);
      stream.next(m.target_component);
      stream.next(m.param_id);
      stream.next(m.param_index);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct PARAM_REQUEST_READ_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavlink_common::PARAM_REQUEST_READ_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavlink_common::PARAM_REQUEST_READ_<ContainerAllocator>& v)
  {
    s << indent << "sysid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sysid);
    s << indent << "compid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.compid);
    s << indent << "target_system: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.target_system);
    s << indent << "target_component: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.target_component);
    s << indent << "param_id[]" << std::endl;
    for (size_t i = 0; i < v.param_id.size(); ++i)
    {
      s << indent << "  param_id[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.param_id[i]);
    }
    s << indent << "param_index: ";
    Printer<int16_t>::stream(s, indent + "  ", v.param_index);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVLINK_COMMON_MESSAGE_PARAM_REQUEST_READ_H
