/* Software License Agreement (BSD License)
 *
 * Copyright (c) 2011, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Willow Garage, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Auto-generated by genmsg_cpp from file /root/ehang_ws/src/ghost/mavlink_common/msg/HIGHRES_IMU.msg
 *
 */


#ifndef MAVLINK_COMMON_MESSAGE_HIGHRES_IMU_H
#define MAVLINK_COMMON_MESSAGE_HIGHRES_IMU_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mavlink_common
{
template <class ContainerAllocator>
struct HIGHRES_IMU_
{
  typedef HIGHRES_IMU_<ContainerAllocator> Type;

  HIGHRES_IMU_()
    : sysid(0)
    , compid(0)
    , time_usec(0)
    , xacc(0.0)
    , yacc(0.0)
    , zacc(0.0)
    , xgyro(0.0)
    , ygyro(0.0)
    , zgyro(0.0)
    , xmag(0.0)
    , ymag(0.0)
    , zmag(0.0)
    , abs_pressure(0.0)
    , diff_pressure(0.0)
    , pressure_alt(0.0)
    , temperature(0.0)
    , fields_updated(0)  {
    }
  HIGHRES_IMU_(const ContainerAllocator& _alloc)
    : sysid(0)
    , compid(0)
    , time_usec(0)
    , xacc(0.0)
    , yacc(0.0)
    , zacc(0.0)
    , xgyro(0.0)
    , ygyro(0.0)
    , zgyro(0.0)
    , xmag(0.0)
    , ymag(0.0)
    , zmag(0.0)
    , abs_pressure(0.0)
    , diff_pressure(0.0)
    , pressure_alt(0.0)
    , temperature(0.0)
    , fields_updated(0)  {
    }



   typedef uint8_t _sysid_type;
  _sysid_type sysid;

   typedef uint8_t _compid_type;
  _compid_type compid;

   typedef uint64_t _time_usec_type;
  _time_usec_type time_usec;

   typedef float _xacc_type;
  _xacc_type xacc;

   typedef float _yacc_type;
  _yacc_type yacc;

   typedef float _zacc_type;
  _zacc_type zacc;

   typedef float _xgyro_type;
  _xgyro_type xgyro;

   typedef float _ygyro_type;
  _ygyro_type ygyro;

   typedef float _zgyro_type;
  _zgyro_type zgyro;

   typedef float _xmag_type;
  _xmag_type xmag;

   typedef float _ymag_type;
  _ymag_type ymag;

   typedef float _zmag_type;
  _zmag_type zmag;

   typedef float _abs_pressure_type;
  _abs_pressure_type abs_pressure;

   typedef float _diff_pressure_type;
  _diff_pressure_type diff_pressure;

   typedef float _pressure_alt_type;
  _pressure_alt_type pressure_alt;

   typedef float _temperature_type;
  _temperature_type temperature;

   typedef uint16_t _fields_updated_type;
  _fields_updated_type fields_updated;


    enum { ID = 105 };
 

  typedef boost::shared_ptr< ::mavlink_common::HIGHRES_IMU_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavlink_common::HIGHRES_IMU_<ContainerAllocator> const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;

}; // struct HIGHRES_IMU_

typedef ::mavlink_common::HIGHRES_IMU_<std::allocator<void> > HIGHRES_IMU;

typedef boost::shared_ptr< ::mavlink_common::HIGHRES_IMU > HIGHRES_IMUPtr;
typedef boost::shared_ptr< ::mavlink_common::HIGHRES_IMU const> HIGHRES_IMUConstPtr;

// constants requiring out of line definition

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavlink_common::HIGHRES_IMU_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavlink_common::HIGHRES_IMU_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mavlink_common

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/hydro/share/std_msgs/cmake/../msg'], 'mavlink_common': ['/root/ehang_ws/src/ghost/mavlink_common/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_common::HIGHRES_IMU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_common::HIGHRES_IMU_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavlink_common::HIGHRES_IMU_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavlink_common::HIGHRES_IMU_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_common::HIGHRES_IMU_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_common::HIGHRES_IMU_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavlink_common::HIGHRES_IMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8d57077cdf4462592d88fa2d73be660a";
  }

  static const char* value(const ::mavlink_common::HIGHRES_IMU_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8d57077cdf446259ULL;
  static const uint64_t static_value2 = 0x2d88fa2d73be660aULL;
};

template<class ContainerAllocator>
struct DataType< ::mavlink_common::HIGHRES_IMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavlink_common/HIGHRES_IMU";
  }

  static const char* value(const ::mavlink_common::HIGHRES_IMU_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavlink_common::HIGHRES_IMU_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Automatically Generated in 2014-08-12 13:24:39.910471\n\
# MESSAGE: HIGHRES_IMU\n\
# Description:The IMU readings in SI units in NED body frame\n\
uint8 ID = 105\n\
uint8 sysid\n\
uint8 compid\n\
uint64 time_usec\n\
float32 xacc\n\
float32 yacc\n\
float32 zacc\n\
float32 xgyro\n\
float32 ygyro\n\
float32 zgyro\n\
float32 xmag\n\
float32 ymag\n\
float32 zmag\n\
float32 abs_pressure\n\
float32 diff_pressure\n\
float32 pressure_alt\n\
float32 temperature\n\
uint16 fields_updated\n\
";
  }

  static const char* value(const ::mavlink_common::HIGHRES_IMU_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavlink_common::HIGHRES_IMU_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sysid);
      stream.next(m.compid);
      stream.next(m.time_usec);
      stream.next(m.xacc);
      stream.next(m.yacc);
      stream.next(m.zacc);
      stream.next(m.xgyro);
      stream.next(m.ygyro);
      stream.next(m.zgyro);
      stream.next(m.xmag);
      stream.next(m.ymag);
      stream.next(m.zmag);
      stream.next(m.abs_pressure);
      stream.next(m.diff_pressure);
      stream.next(m.pressure_alt);
      stream.next(m.temperature);
      stream.next(m.fields_updated);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct HIGHRES_IMU_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavlink_common::HIGHRES_IMU_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavlink_common::HIGHRES_IMU_<ContainerAllocator>& v)
  {
    s << indent << "sysid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sysid);
    s << indent << "compid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.compid);
    s << indent << "time_usec: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.time_usec);
    s << indent << "xacc: ";
    Printer<float>::stream(s, indent + "  ", v.xacc);
    s << indent << "yacc: ";
    Printer<float>::stream(s, indent + "  ", v.yacc);
    s << indent << "zacc: ";
    Printer<float>::stream(s, indent + "  ", v.zacc);
    s << indent << "xgyro: ";
    Printer<float>::stream(s, indent + "  ", v.xgyro);
    s << indent << "ygyro: ";
    Printer<float>::stream(s, indent + "  ", v.ygyro);
    s << indent << "zgyro: ";
    Printer<float>::stream(s, indent + "  ", v.zgyro);
    s << indent << "xmag: ";
    Printer<float>::stream(s, indent + "  ", v.xmag);
    s << indent << "ymag: ";
    Printer<float>::stream(s, indent + "  ", v.ymag);
    s << indent << "zmag: ";
    Printer<float>::stream(s, indent + "  ", v.zmag);
    s << indent << "abs_pressure: ";
    Printer<float>::stream(s, indent + "  ", v.abs_pressure);
    s << indent << "diff_pressure: ";
    Printer<float>::stream(s, indent + "  ", v.diff_pressure);
    s << indent << "pressure_alt: ";
    Printer<float>::stream(s, indent + "  ", v.pressure_alt);
    s << indent << "temperature: ";
    Printer<float>::stream(s, indent + "  ", v.temperature);
    s << indent << "fields_updated: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.fields_updated);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVLINK_COMMON_MESSAGE_HIGHRES_IMU_H
