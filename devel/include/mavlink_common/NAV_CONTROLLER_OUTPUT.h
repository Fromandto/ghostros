/* Software License Agreement (BSD License)
 *
 * Copyright (c) 2011, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Willow Garage, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Auto-generated by genmsg_cpp from file /root/ehang_ws/src/ghost/mavlink_common/msg/NAV_CONTROLLER_OUTPUT.msg
 *
 */


#ifndef MAVLINK_COMMON_MESSAGE_NAV_CONTROLLER_OUTPUT_H
#define MAVLINK_COMMON_MESSAGE_NAV_CONTROLLER_OUTPUT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mavlink_common
{
template <class ContainerAllocator>
struct NAV_CONTROLLER_OUTPUT_
{
  typedef NAV_CONTROLLER_OUTPUT_<ContainerAllocator> Type;

  NAV_CONTROLLER_OUTPUT_()
    : sysid(0)
    , compid(0)
    , nav_roll(0.0)
    , nav_pitch(0.0)
    , nav_bearing(0)
    , target_bearing(0)
    , wp_dist(0)
    , alt_error(0.0)
    , aspd_error(0.0)
    , xtrack_error(0.0)  {
    }
  NAV_CONTROLLER_OUTPUT_(const ContainerAllocator& _alloc)
    : sysid(0)
    , compid(0)
    , nav_roll(0.0)
    , nav_pitch(0.0)
    , nav_bearing(0)
    , target_bearing(0)
    , wp_dist(0)
    , alt_error(0.0)
    , aspd_error(0.0)
    , xtrack_error(0.0)  {
    }



   typedef uint8_t _sysid_type;
  _sysid_type sysid;

   typedef uint8_t _compid_type;
  _compid_type compid;

   typedef float _nav_roll_type;
  _nav_roll_type nav_roll;

   typedef float _nav_pitch_type;
  _nav_pitch_type nav_pitch;

   typedef int16_t _nav_bearing_type;
  _nav_bearing_type nav_bearing;

   typedef int16_t _target_bearing_type;
  _target_bearing_type target_bearing;

   typedef uint16_t _wp_dist_type;
  _wp_dist_type wp_dist;

   typedef float _alt_error_type;
  _alt_error_type alt_error;

   typedef float _aspd_error_type;
  _aspd_error_type aspd_error;

   typedef float _xtrack_error_type;
  _xtrack_error_type xtrack_error;


    enum { ID = 62 };
 

  typedef boost::shared_ptr< ::mavlink_common::NAV_CONTROLLER_OUTPUT_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavlink_common::NAV_CONTROLLER_OUTPUT_<ContainerAllocator> const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;

}; // struct NAV_CONTROLLER_OUTPUT_

typedef ::mavlink_common::NAV_CONTROLLER_OUTPUT_<std::allocator<void> > NAV_CONTROLLER_OUTPUT;

typedef boost::shared_ptr< ::mavlink_common::NAV_CONTROLLER_OUTPUT > NAV_CONTROLLER_OUTPUTPtr;
typedef boost::shared_ptr< ::mavlink_common::NAV_CONTROLLER_OUTPUT const> NAV_CONTROLLER_OUTPUTConstPtr;

// constants requiring out of line definition

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavlink_common::NAV_CONTROLLER_OUTPUT_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavlink_common::NAV_CONTROLLER_OUTPUT_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mavlink_common

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/hydro/share/std_msgs/cmake/../msg'], 'mavlink_common': ['/root/ehang_ws/src/ghost/mavlink_common/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_common::NAV_CONTROLLER_OUTPUT_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_common::NAV_CONTROLLER_OUTPUT_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavlink_common::NAV_CONTROLLER_OUTPUT_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavlink_common::NAV_CONTROLLER_OUTPUT_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_common::NAV_CONTROLLER_OUTPUT_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_common::NAV_CONTROLLER_OUTPUT_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavlink_common::NAV_CONTROLLER_OUTPUT_<ContainerAllocator> >
{
  static const char* value()
  {
    return "087841615473eaeeffaf17fc2cd95161";
  }

  static const char* value(const ::mavlink_common::NAV_CONTROLLER_OUTPUT_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x087841615473eaeeULL;
  static const uint64_t static_value2 = 0xffaf17fc2cd95161ULL;
};

template<class ContainerAllocator>
struct DataType< ::mavlink_common::NAV_CONTROLLER_OUTPUT_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavlink_common/NAV_CONTROLLER_OUTPUT";
  }

  static const char* value(const ::mavlink_common::NAV_CONTROLLER_OUTPUT_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavlink_common::NAV_CONTROLLER_OUTPUT_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Automatically Generated in 2014-08-12 13:24:39.909160\n\
# MESSAGE: NAV_CONTROLLER_OUTPUT\n\
# Description:Outputs of the APM navigation controller. The primary use of this message is to check the response and signs of the controller before actual flight and to assist with tuning controller parameters.\n\
uint8 ID = 62\n\
uint8 sysid\n\
uint8 compid\n\
float32 nav_roll\n\
float32 nav_pitch\n\
int16 nav_bearing\n\
int16 target_bearing\n\
uint16 wp_dist\n\
float32 alt_error\n\
float32 aspd_error\n\
float32 xtrack_error\n\
";
  }

  static const char* value(const ::mavlink_common::NAV_CONTROLLER_OUTPUT_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavlink_common::NAV_CONTROLLER_OUTPUT_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sysid);
      stream.next(m.compid);
      stream.next(m.nav_roll);
      stream.next(m.nav_pitch);
      stream.next(m.nav_bearing);
      stream.next(m.target_bearing);
      stream.next(m.wp_dist);
      stream.next(m.alt_error);
      stream.next(m.aspd_error);
      stream.next(m.xtrack_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct NAV_CONTROLLER_OUTPUT_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavlink_common::NAV_CONTROLLER_OUTPUT_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavlink_common::NAV_CONTROLLER_OUTPUT_<ContainerAllocator>& v)
  {
    s << indent << "sysid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sysid);
    s << indent << "compid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.compid);
    s << indent << "nav_roll: ";
    Printer<float>::stream(s, indent + "  ", v.nav_roll);
    s << indent << "nav_pitch: ";
    Printer<float>::stream(s, indent + "  ", v.nav_pitch);
    s << indent << "nav_bearing: ";
    Printer<int16_t>::stream(s, indent + "  ", v.nav_bearing);
    s << indent << "target_bearing: ";
    Printer<int16_t>::stream(s, indent + "  ", v.target_bearing);
    s << indent << "wp_dist: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.wp_dist);
    s << indent << "alt_error: ";
    Printer<float>::stream(s, indent + "  ", v.alt_error);
    s << indent << "aspd_error: ";
    Printer<float>::stream(s, indent + "  ", v.aspd_error);
    s << indent << "xtrack_error: ";
    Printer<float>::stream(s, indent + "  ", v.xtrack_error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVLINK_COMMON_MESSAGE_NAV_CONTROLLER_OUTPUT_H
