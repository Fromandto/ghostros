/* Software License Agreement (BSD License)
 *
 * Copyright (c) 2011, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Willow Garage, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Auto-generated by genmsg_cpp from file /root/ehang_ws/src/ghost/mavlink_common/msg/HEARTBEAT.msg
 *
 */


#ifndef MAVLINK_COMMON_MESSAGE_HEARTBEAT_H
#define MAVLINK_COMMON_MESSAGE_HEARTBEAT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mavlink_common
{
template <class ContainerAllocator>
struct HEARTBEAT_
{
  typedef HEARTBEAT_<ContainerAllocator> Type;

  HEARTBEAT_()
    : sysid(0)
    , compid(0)
    , type(0)
    , autopilot(0)
    , base_mode(0)
    , custom_mode(0)
    , system_status(0)
    , mavlink_version(0)  {
    }
  HEARTBEAT_(const ContainerAllocator& _alloc)
    : sysid(0)
    , compid(0)
    , type(0)
    , autopilot(0)
    , base_mode(0)
    , custom_mode(0)
    , system_status(0)
    , mavlink_version(0)  {
    }



   typedef uint8_t _sysid_type;
  _sysid_type sysid;

   typedef uint8_t _compid_type;
  _compid_type compid;

   typedef uint8_t _type_type;
  _type_type type;

   typedef uint8_t _autopilot_type;
  _autopilot_type autopilot;

   typedef uint8_t _base_mode_type;
  _base_mode_type base_mode;

   typedef uint32_t _custom_mode_type;
  _custom_mode_type custom_mode;

   typedef uint8_t _system_status_type;
  _system_status_type system_status;

   typedef uint8_t _mavlink_version_type;
  _mavlink_version_type mavlink_version;


    enum { ID = 0 };
 

  typedef boost::shared_ptr< ::mavlink_common::HEARTBEAT_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavlink_common::HEARTBEAT_<ContainerAllocator> const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;

}; // struct HEARTBEAT_

typedef ::mavlink_common::HEARTBEAT_<std::allocator<void> > HEARTBEAT;

typedef boost::shared_ptr< ::mavlink_common::HEARTBEAT > HEARTBEATPtr;
typedef boost::shared_ptr< ::mavlink_common::HEARTBEAT const> HEARTBEATConstPtr;

// constants requiring out of line definition

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavlink_common::HEARTBEAT_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavlink_common::HEARTBEAT_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mavlink_common

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/hydro/share/std_msgs/cmake/../msg'], 'mavlink_common': ['/root/ehang_ws/src/ghost/mavlink_common/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_common::HEARTBEAT_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_common::HEARTBEAT_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavlink_common::HEARTBEAT_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavlink_common::HEARTBEAT_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_common::HEARTBEAT_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_common::HEARTBEAT_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavlink_common::HEARTBEAT_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fa8eba48cf8207e18a3851a49c54c762";
  }

  static const char* value(const ::mavlink_common::HEARTBEAT_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfa8eba48cf8207e1ULL;
  static const uint64_t static_value2 = 0x8a3851a49c54c762ULL;
};

template<class ContainerAllocator>
struct DataType< ::mavlink_common::HEARTBEAT_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavlink_common/HEARTBEAT";
  }

  static const char* value(const ::mavlink_common::HEARTBEAT_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavlink_common::HEARTBEAT_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Automatically Generated in 2014-08-12 13:24:39.905819\n\
# MESSAGE: HEARTBEAT\n\
# Description:The heartbeat message shows that a system is present and responding. The type of the MAV and Autopilot hardware allow the receiving system to treat further messages from this system appropriate (e.g. by laying out the user interface based on the autopilot).\n\
uint8 ID = 0\n\
uint8 sysid\n\
uint8 compid\n\
uint8 type\n\
uint8 autopilot\n\
uint8 base_mode\n\
uint32 custom_mode\n\
uint8 system_status\n\
uint8 mavlink_version\n\
";
  }

  static const char* value(const ::mavlink_common::HEARTBEAT_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavlink_common::HEARTBEAT_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sysid);
      stream.next(m.compid);
      stream.next(m.type);
      stream.next(m.autopilot);
      stream.next(m.base_mode);
      stream.next(m.custom_mode);
      stream.next(m.system_status);
      stream.next(m.mavlink_version);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct HEARTBEAT_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavlink_common::HEARTBEAT_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavlink_common::HEARTBEAT_<ContainerAllocator>& v)
  {
    s << indent << "sysid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sysid);
    s << indent << "compid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.compid);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "autopilot: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.autopilot);
    s << indent << "base_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.base_mode);
    s << indent << "custom_mode: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.custom_mode);
    s << indent << "system_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.system_status);
    s << indent << "mavlink_version: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mavlink_version);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVLINK_COMMON_MESSAGE_HEARTBEAT_H
