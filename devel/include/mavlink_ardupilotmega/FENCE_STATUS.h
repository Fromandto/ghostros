/* Software License Agreement (BSD License)
 *
 * Copyright (c) 2011, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Willow Garage, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Auto-generated by genmsg_cpp from file /root/ehang_ws/src/ghost/mavlink_ardupilotmega/msg/FENCE_STATUS.msg
 *
 */


#ifndef MAVLINK_ARDUPILOTMEGA_MESSAGE_FENCE_STATUS_H
#define MAVLINK_ARDUPILOTMEGA_MESSAGE_FENCE_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mavlink_ardupilotmega
{
template <class ContainerAllocator>
struct FENCE_STATUS_
{
  typedef FENCE_STATUS_<ContainerAllocator> Type;

  FENCE_STATUS_()
    : sysid(0)
    , compid(0)
    , breach_status(0)
    , breach_count(0)
    , breach_type(0)
    , breach_time(0)  {
    }
  FENCE_STATUS_(const ContainerAllocator& _alloc)
    : sysid(0)
    , compid(0)
    , breach_status(0)
    , breach_count(0)
    , breach_type(0)
    , breach_time(0)  {
    }



   typedef uint8_t _sysid_type;
  _sysid_type sysid;

   typedef uint8_t _compid_type;
  _compid_type compid;

   typedef uint8_t _breach_status_type;
  _breach_status_type breach_status;

   typedef uint16_t _breach_count_type;
  _breach_count_type breach_count;

   typedef uint8_t _breach_type_type;
  _breach_type_type breach_type;

   typedef uint32_t _breach_time_type;
  _breach_time_type breach_time;


    enum { ID = 162 };
 

  typedef boost::shared_ptr< ::mavlink_ardupilotmega::FENCE_STATUS_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavlink_ardupilotmega::FENCE_STATUS_<ContainerAllocator> const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;

}; // struct FENCE_STATUS_

typedef ::mavlink_ardupilotmega::FENCE_STATUS_<std::allocator<void> > FENCE_STATUS;

typedef boost::shared_ptr< ::mavlink_ardupilotmega::FENCE_STATUS > FENCE_STATUSPtr;
typedef boost::shared_ptr< ::mavlink_ardupilotmega::FENCE_STATUS const> FENCE_STATUSConstPtr;

// constants requiring out of line definition

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavlink_ardupilotmega::FENCE_STATUS_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavlink_ardupilotmega::FENCE_STATUS_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mavlink_ardupilotmega

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/hydro/share/std_msgs/cmake/../msg'], 'mavlink_ardupilotmega': ['/root/ehang_ws/src/ghost/mavlink_ardupilotmega/msg'], 'mavlink_common': ['/root/ehang_ws/src/ghost/mavlink_common/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_ardupilotmega::FENCE_STATUS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_ardupilotmega::FENCE_STATUS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavlink_ardupilotmega::FENCE_STATUS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavlink_ardupilotmega::FENCE_STATUS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_ardupilotmega::FENCE_STATUS_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_ardupilotmega::FENCE_STATUS_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavlink_ardupilotmega::FENCE_STATUS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "065bf7ec1c4770ac5ffac40802ea0d7a";
  }

  static const char* value(const ::mavlink_ardupilotmega::FENCE_STATUS_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x065bf7ec1c4770acULL;
  static const uint64_t static_value2 = 0x5ffac40802ea0d7aULL;
};

template<class ContainerAllocator>
struct DataType< ::mavlink_ardupilotmega::FENCE_STATUS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavlink_ardupilotmega/FENCE_STATUS";
  }

  static const char* value(const ::mavlink_ardupilotmega::FENCE_STATUS_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavlink_ardupilotmega::FENCE_STATUS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Automatically Generated in 2014-08-12 13:24:39.913811\n\
# MESSAGE: FENCE_STATUS\n\
# Description:Status of geo-fencing. Sent in extended\n\
#	    status stream when fencing enabled\n\
uint8 ID = 162\n\
uint8 sysid\n\
uint8 compid\n\
uint8 breach_status\n\
uint16 breach_count\n\
uint8 breach_type\n\
uint32 breach_time\n\
";
  }

  static const char* value(const ::mavlink_ardupilotmega::FENCE_STATUS_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavlink_ardupilotmega::FENCE_STATUS_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sysid);
      stream.next(m.compid);
      stream.next(m.breach_status);
      stream.next(m.breach_count);
      stream.next(m.breach_type);
      stream.next(m.breach_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct FENCE_STATUS_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavlink_ardupilotmega::FENCE_STATUS_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavlink_ardupilotmega::FENCE_STATUS_<ContainerAllocator>& v)
  {
    s << indent << "sysid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sysid);
    s << indent << "compid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.compid);
    s << indent << "breach_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.breach_status);
    s << indent << "breach_count: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.breach_count);
    s << indent << "breach_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.breach_type);
    s << indent << "breach_time: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.breach_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVLINK_ARDUPILOTMEGA_MESSAGE_FENCE_STATUS_H
